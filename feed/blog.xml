<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://www.scala-lang.org/blog/</id>
  <title type="text" xml:lang="en">The Scala Programming Language :: Blog</title>
  <link type="application/atom+xml" href="https://www.scala-lang.org/feed/blog.xml" rel="self"/>
  <link type="text/html" href="https://www.scala-lang.org/blog/" rel="alternate"/>

  <updated>2023-06-29T10:56:40+02:00</updated>
  <author>
    <name>École Polytechnique Fédérale de Lausanne</name>
  </author>
  <rights>Copyright (c) 2002-2023 École Polytechnique Fédérale de Lausanne (EPFL), Lausanne, Switzerland</rights>

  
  <entry>
    <title>The Scala Toolkit</title>
    <link href="https://www.scala-lang.org/blog/2023/06/20/toolkit.html"/>
    <updated>2023-06-20T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2023/06/20/toolkit</id>
    <content type="html">&lt;p&gt;The Scala organization is pleased to announce the release of the Scala Toolkit and its series of tutorials in &lt;a href=&quot;https://docs.scala-lang.org/toolkit/introduction.html&quot;&gt;docs.scala-lang.org/toolkit&lt;/a&gt;.
The current version is 0.2.0. We call it an early release because it is not 1.0.0 yet (see below in the FAQ for more details).&lt;/p&gt;

&lt;p&gt;The Toolkit is a bundle of libraries from the ecosystem that work well together to perform common programming tasks.
It is a good fit for trying out Scala, writing a script, prototyping, or bootstrapping a new application.
It can also be used in larger applications.&lt;/p&gt;

&lt;p&gt;In this initial release, the Toolkit includes OS-Lib for working with files and processes, UPickle for parsing JSON, sttp for sending HTTP requests, and MUnit for unit testing.&lt;/p&gt;

&lt;p&gt;You can try out the Toolkit using Scala CLI:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In the REPL
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ scala-cli --toolkit latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;In a Scala script or file
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//&amp;gt; using toolkit latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog post outlines the motivation and design of the Toolkit.
It illustrates how to use it, including setup instructions for tools such as Scala CLI, sbt, Mill, and Maven.
Finally, a FAQ section contains answers to commonly asked questions.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;We would like to express our gratitude and appreciation to the authors and maintainers of &lt;a href=&quot;https://github.com/com-lihaoyi/os-lib&quot;&gt;com-lihaoyi/os-lib&lt;/a&gt;, &lt;a href=&quot;https://github.com/com-lihaoyi/upickle&quot;&gt;com-lihaoyi/upickle&lt;/a&gt;, &lt;a href=&quot;https://github.com/softwaremill/sttp&quot;&gt;softwaremill/sttp&lt;/a&gt; and &lt;a href=&quot;https://github.com/scalameta/munit&quot;&gt;scalameta/munit&lt;/a&gt;.
Their collaborative efforts and dedication have been crucial in the successful creation of the Toolkit.
We are looking forward to continued collaboration in the future.&lt;/p&gt;

&lt;h2 id=&quot;why-the-toolkit&quot;&gt;Why the Toolkit?&lt;/h2&gt;

&lt;p&gt;The Toolkit project is a significant step in our ongoing effort to make Scala more accessible, lightweight, and fun to use.
In particular, we aim at lowering the onboarding barrier for newcomers from different programming backgrounds.&lt;/p&gt;

&lt;p&gt;Scala’s library ecosystem offers multiple choices for doing almost anything.
The ecosystem’s richness is a great strength of the language, but can also be confusing and intimidating.
The Toolkit aims to offer default choices for coders who aren’t in a position to evaluate competing libraries and just want to get something done.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-toolkit&quot;&gt;What is the Toolkit?&lt;/h2&gt;

&lt;p&gt;The Toolkit gathers a number of pre-existing libraries of the ecosystem that focus on concrete, recurring software engineering problems, such as working with files and processes, parsing JSON, and sending HTTP requests.&lt;/p&gt;

&lt;p&gt;Its documentation can be found at &lt;a href=&quot;https://docs.scala-lang.org/toolkit/introduction.html&quot;&gt;docs.scala-lang.org/toolkit&lt;/a&gt;.
It comprises a collection of concise tutorials, including short code examples, that aim at being self-contained.
They not only explain how to use each library individually, but also how to combine them in meaningful ways.&lt;/p&gt;

&lt;p&gt;The Toolkit aims at being approachable.
It does not require extended knowledge of the more advanced features of Scala (higher-kinded types, macros, etc) nor of the more advanced concepts of the ecosystem (asynchronous, pure-functional, reactive, actor-based).&lt;/p&gt;

&lt;p&gt;The Toolkit favors libraries that provide a user-friendly getting-started experience.
They enable the developer to explore the API with auto-completion and integrated documentation (scaladoc), and discover the functionalities as they write their code.
Additionally, they prioritize clear and informative types, signatures and error messages, rather than abstraction and flexibility.&lt;/p&gt;

&lt;h2 id=&quot;what-can-you-do-with-the-toolkit&quot;&gt;What can you do with the Toolkit?&lt;/h2&gt;

&lt;p&gt;Here is an example of what you can do with the Toolkit:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//&amp;gt; using toolkit 0.2.0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sttp.client4.quick.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ujson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;location&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hometown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;bio&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Scala programmer&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITHUB_TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quickRequest&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.github.com/user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;bearer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ujson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prints: 200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This short program sends an HTTP request to the &lt;a href=&quot;https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#update-the-authenticated-user&quot;&gt;Github REST API&lt;/a&gt;, to update the profile of the authenticated users.
In a few lines, it shows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;how to construct a JSON object, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ujson.Obj&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;how to read an environment variable, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.env&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;how to create an HTTP request, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quickRequest&lt;/code&gt; builder in sttp&lt;/li&gt;
  &lt;li&gt;how to authenticate the request with a token&lt;/li&gt;
  &lt;li&gt;how to add a JSON body and a header&lt;/li&gt;
  &lt;li&gt;how to send the request and receive a response&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More examples can be found in &lt;a href=&quot;https://docs.scala-lang.org/toolkit/introduction.html&quot;&gt;docs.scala-lang.org/toolkit&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-the-toolkit&quot;&gt;When to use the Toolkit?&lt;/h2&gt;

&lt;p&gt;The Toolkit is a good fit for trying out Scala, writing a script, prototyping, or bootstrapping a new application.
It can also be used in larger applications.&lt;/p&gt;

&lt;h3 id=&quot;trying-out-scala&quot;&gt;Trying out Scala&lt;/h3&gt;

&lt;p&gt;The Toolkit offers accessible APIs that should feel familiar to programmers coming from different backgrounds, such as Java or Python.
It is a good resource for learning or teaching how to use Scala in real-world applications, giving newcomers the opportunity to be productive early in their Scala learning journey.&lt;/p&gt;

&lt;h3 id=&quot;scripting-and-prototyping&quot;&gt;Scripting and prototyping&lt;/h3&gt;

&lt;p&gt;The Toolkit tutorials encourage synchronous code that throws exceptions instead of returning errors as values.
This is particularly well-suited for scripting and prototyping purposes, where you want to obtain results quickly, without caring much about safety or performance.&lt;/p&gt;

&lt;p&gt;Toolkit libraries do have the capability to handle errors as values and support asynchronous operations, but these features are optional and can be enabled when required.&lt;/p&gt;

&lt;h3 id=&quot;bootstrapping-an-application&quot;&gt;Bootstrapping an application&lt;/h3&gt;

&lt;p&gt;When bootstrapping an application, selecting libraries from the available ecosystems, familiarizing yourself with them, and configuring them appropriately is challenging and time consuming.&lt;/p&gt;

&lt;p&gt;The toolkit aims at reducing this overhead, by offering a comprehensive set of pre-packaged libraries that cater to many of your needs.
These features are documented in a centralized location, allowing for easy reference.&lt;/p&gt;

&lt;p&gt;Additionally, the Toolkit minimizes transitive dependencies, to help you steer clear of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_hell&quot;&gt;dependency hell&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-the-toolkit&quot;&gt;How to get the Toolkit?&lt;/h2&gt;

&lt;h3 id=&quot;using-scala-cli&quot;&gt;Using Scala CLI&lt;/h3&gt;

&lt;p&gt;In a terminal, you can start the REPL with the Toolkit on the classpath.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ scala-cli --toolkit 0.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can get it in a Scala script or file.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//&amp;gt; using toolkit 0.2.0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ujson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;{&quot;message&quot;: &quot;Hello, World!&quot;}&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prints: Hello, World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;in-build-tools&quot;&gt;In build tools&lt;/h3&gt;

&lt;p&gt;The toolkit has two artifacts: one for the main target and another for the tests.&lt;/p&gt;

&lt;div class=&quot;place-inline&quot;&gt;
  &lt;div id=&quot;build-tools&quot; class=&quot;tabsection&quot;&gt;
    
      &lt;input type=&quot;radio&quot; name=&quot;build-tools_tabs&quot; id=&quot;build-tools_sbt_description&quot; data-target=&quot;sbt&quot; hidden=&quot;&quot; aria-hidden=&quot;true&quot; checked=&quot;&quot; /&gt;
    
      &lt;input type=&quot;radio&quot; name=&quot;build-tools_tabs&quot; id=&quot;build-tools_mill_description&quot; data-target=&quot;mill&quot; hidden=&quot;&quot; aria-hidden=&quot;true&quot; /&gt;
    
      &lt;input type=&quot;radio&quot; name=&quot;build-tools_tabs&quot; id=&quot;build-tools_maven_description&quot; data-target=&quot;maven&quot; hidden=&quot;&quot; aria-hidden=&quot;true&quot; /&gt;
    
    &lt;ul hidden=&quot;&quot; aria-hidden=&quot;true&quot; class=&quot;nav-tab&quot;&gt;
      
        &lt;li class=&quot;item-tab&quot;&gt;
          &lt;label class=&quot;item-tab-link&quot; for=&quot;build-tools_sbt_description&quot;&gt;sbt&lt;/label&gt;
        &lt;/li&gt;
      
        &lt;li class=&quot;item-tab&quot;&gt;
          &lt;label class=&quot;item-tab-link&quot; for=&quot;build-tools_mill_description&quot;&gt;Mill&lt;/label&gt;
        &lt;/li&gt;
      
        &lt;li class=&quot;item-tab&quot;&gt;
          &lt;label class=&quot;item-tab-link&quot; for=&quot;build-tools_maven_description&quot;&gt;Maven&lt;/label&gt;
        &lt;/li&gt;
      
    &lt;/ul&gt;
    &lt;div class=&quot;tabcontent&quot;&gt;
      
        &lt;section id=&quot;sbt_content&quot;&gt;
          &lt;div class=&quot;wrap-tab&quot;&gt;
            
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;org.scala-lang&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;toolkit&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;org.scala-lang&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;toolkit-test&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

          &lt;/div&gt;
        &lt;/section&gt;
      
        &lt;section id=&quot;mill_content&quot;&gt;
          &lt;div class=&quot;wrap-tab&quot;&gt;
            
&lt;p&gt;In the main module:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ivyDeps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Agg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ivy&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-lang::toolkit:0.2.0&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the test module:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ivyDeps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Agg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ivy&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.scala-lang::toolkit-test:0.2.0&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

          &lt;/div&gt;
        &lt;/section&gt;
      
        &lt;section id=&quot;maven_content&quot;&gt;
          &lt;div class=&quot;wrap-tab&quot;&gt;
            
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.scala-lang&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;toolkit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.scala-lang&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;toolkit-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

          &lt;/div&gt;
        &lt;/section&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;

&lt;h3 id=&quot;what-is-the-difference-between-the-standard-library-and-the-toolkit&quot;&gt;What is the difference between the Standard Library and the Toolkit?&lt;/h3&gt;

&lt;p&gt;The Scala Standard Library contains the most essential building blocks to build and run Scala programs, such as collections.
It also contains the Scala runtime, without which you cannot run any Scala program.&lt;/p&gt;

&lt;p&gt;The Toolkit, in turn, relies on the Standard Library as a dependency and expands upon it by addressing specific use cases.
When developing a Scala program, you have the flexibility to choose between utilizing the Toolkit or leveraging other libraries.&lt;/p&gt;

&lt;h3 id=&quot;how-are-the-libraries-selected&quot;&gt;How are the libraries selected?&lt;/h3&gt;

&lt;p&gt;To select the libraries of the Toolkit we used the following criterion:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;API Usability: Consistency, abstraction level, visibility, language level etc.&lt;/li&gt;
  &lt;li&gt;Responsiveness and availability of the maintainers&lt;/li&gt;
  &lt;li&gt;Documentation&lt;/li&gt;
  &lt;li&gt;Popularity&lt;/li&gt;
  &lt;li&gt;Dependencies&lt;/li&gt;
  &lt;li&gt;Support for Scala.js and Scala Native&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;who-owns-the-toolkit-libraries&quot;&gt;Who owns the Toolkit libraries?&lt;/h3&gt;

&lt;p&gt;The Toolkit is composed of pre-existing libraries from the ecosystem, created by different organizations and individuals.&lt;/p&gt;

&lt;p&gt;Those libraries are owned by their respective authors and maintainers.
The Scala organization takes on the responsibility of curating the libraries, releasing the Toolkit artifacts and regularly updating the tutorials in &lt;a href=&quot;https://docs.scala-lang.org/toolkit/introduction.html&quot;&gt;docs.scala-lang.org/toolkit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Scala organization can provide some guidance or temporary help to ensure smooth integration and compatibility of the Toolkit libraries.&lt;/p&gt;

&lt;h3 id=&quot;what-does-early-mean-in-early-release&quot;&gt;What does &lt;em&gt;early&lt;/em&gt; mean in early release?&lt;/h3&gt;

&lt;p&gt;The Toolkit version is said to be early as long as it begins with 0.x, as in 0.2.0.
It allows for the API of the Toolkit to evolve and change without any restriction.
This is in part due to the fact it depends on milestone versions of sttp, and MUnit.&lt;/p&gt;

&lt;p&gt;Once the Toolkit reaches its first stable version, it will be labeled as 1.0.0.
Only stable versions of libraries will be included.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-versionning-scheme-of-the-toolkit&quot;&gt;What is the versionning scheme of the Toolkit?&lt;/h3&gt;

&lt;p&gt;The Scala Toolkit follows the &lt;a href=&quot;https://semver.org&quot;&gt;semantic versioning scheme&lt;/a&gt;, provided that the underlying libraries also adhere to the semantic versioning scheme.&lt;/p&gt;

&lt;p&gt;A new patch version of the Toolkit signifies that there have been only patch bumps of the underlying libraries.
A new minor version of the Toolkit includes minor bumps of the underlying libraries, but avoids any major bump.
A new major version of the Toolkit includes at least one major bump of an underlying library.&lt;/p&gt;

&lt;h3 id=&quot;does-it-support-scala-2-and-scala-3&quot;&gt;Does it support Scala 2 and Scala 3?&lt;/h3&gt;

&lt;p&gt;You can use the Toolkit with Scala 2.13 and Scala 3.x.&lt;/p&gt;

&lt;h3 id=&quot;does-it-support-scalajs-and-scala-native&quot;&gt;Does it support Scala.js and Scala Native?&lt;/h3&gt;

&lt;p&gt;All the versions of the Toolkit will support Scala.js and Scala Native, with some differences in the provided functionalities.&lt;/p&gt;

&lt;p&gt;At the moment, there is no support for files and processes in Scala.js, mainly because such functionalities would heavily depend on your JavaScript runtime.&lt;/p&gt;

&lt;p&gt;You should be able to develop your script using the JVM toolchain, but then you can switch to Scala Native to get instant startup, or to Scala.js to deploy and run your script in web browsers.&lt;/p&gt;

&lt;h3 id=&quot;can-there-be-other-toolkits&quot;&gt;Can there be other Toolkits?&lt;/h3&gt;

&lt;p&gt;Yes, there is room in the Scala ecosystem for other “toolkits” besides the Scala Toolkit.
For example, the &lt;a href=&quot;https://typelevel.org/toolkit/&quot;&gt;Typelevel Toolkit&lt;/a&gt; is the toolkit of the Typelevel organization.&lt;/p&gt;

&lt;p&gt;Typelevel is an open-source organization that builds and maintains a purely functional stack of libraries in Scala, based on &lt;a href=&quot;https://typelevel.org/cats/&quot;&gt;cats&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Their toolkit is composed of Typelevel libraries and fully supports JVM, Node.js, and Native.
You can try it out in Scala CLI:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//&amp;gt; using toolkit typelevel:latest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cats.effect.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IOApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Simple&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whether you should use the Scala Toolkit or the Typelevel Toolkit depends on your preference and familiarity with pure functional programming.&lt;/p&gt;

&lt;h3 id=&quot;how-to-share-feedback&quot;&gt;How to share feedback?&lt;/h3&gt;

&lt;p&gt;To share general feedback about the Toolkit you can read and comment on this &lt;a href=&quot;https://users.scala-lang.org/t/scala-toolkit-0-2-0-is-out-discussion/9355&quot;&gt;thread&lt;/a&gt; in the Scala Users forum.&lt;/p&gt;

&lt;p&gt;To report an issue you can go to the issue tracker in the &lt;a href=&quot;https://github.com/scala/toolkit/issues&quot;&gt;scala/toolkit&lt;/a&gt; repository.&lt;/p&gt;

&lt;h2 id=&quot;plans-for-the-future&quot;&gt;Plans for the future&lt;/h2&gt;

&lt;p&gt;We are focused on stabilizing the initial release of the Toolkit, to ensure the first set of features is functioning seamlessly.&lt;/p&gt;

&lt;p&gt;Simultaneously, we are laying the ground for future versions, in which we will expand the Toolkit’s capabilities.
Among the functionalities under consideration, we are exploring manipulation of CSV files, SQL database querying, HTTP servers, and logging.&lt;/p&gt;

&lt;p&gt;Our goal is to create a versatile Toolkit that caters to a wide range of software engineering needs, with a particular emphasis on supporting newcomers, scripting, and prototyping.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scala 3.3.0 released!</title>
    <link href="https://www.scala-lang.org/blog/2023/05/30/scala-3.3.0-released.html"/>
    <updated>2023-05-30T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2023/05/30/scala-3.3.0-released</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;/resources/img/scala-3.3_LTS-launch.png&quot; alt=&quot;Scala 3.3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are thrilled to announce that after long months of work and careful testing, we have released Scala 3.3.0, the first release in the new 3.3.x LTS series.&lt;/p&gt;

&lt;h2 id=&quot;what-does-lts-mean&quot;&gt;What does “LTS” mean?&lt;/h2&gt;

&lt;p&gt;Scala 3.3.x is the first Long Term Support (LTS) release series. That means that it will be actively maintained for a period of at least three years. We have adopted a release model similar to the one that Java has successfully used for a long time.&lt;/p&gt;

&lt;p&gt;In the following years, there will be new minor releases (3.4, 3.5, and so on) that can bring new backward-compatible features. We are calling them Scala Next; they are equivalent to Java’s feature releases. Bug fixes and usability improvements from those releases will be back-ported and released as 3.3.x patches. Apart from those forward and backward-compatible changes, LTS will be feature frozen.&lt;/p&gt;

&lt;p&gt;The LTS model doesn’t change anything in our compatibility guarantees. Projects built with all future releases will be able to depend on any library compiled with Scala 3.3.x. This is just our standard guarantee that the newer compiler can always consume the output of the older version.&lt;/p&gt;

&lt;p&gt;LTS might be a great choice for library authors who can now receive constant bug fixes and developer experience improvements without forcing the users of the library to update the compiler version in their project.&lt;/p&gt;

&lt;p&gt;You can read more about our compatibility guarantees in &lt;a href=&quot;https://virtuslab.com/blog/the-scala-3-compatibility-story/&quot;&gt;the recent blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-new-in-scala-330&quot;&gt;What’s new in Scala 3.3.0&lt;/h2&gt;

&lt;h3 id=&quot;linting&quot;&gt;Linting&lt;/h3&gt;

&lt;p&gt;Scala 3.3.0 brings back linting to the Scala compiler.  Right now, you can enable checking for unused symbols and discarded values. More linting options will come soon in the following Scala 3.3.x releases.&lt;/p&gt;

&lt;h4 id=&quot;checking-for-unused-values&quot;&gt;Checking for unused values&lt;/h4&gt;

&lt;p&gt;There is an entire family of compiler options added in 3.3.0 for checking and reporting different kinds of unused symbols:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wunused:imports&lt;/code&gt; - for unused imports&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wunused:privates&lt;/code&gt; - for unused local definitions&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wunused:locals&lt;/code&gt;  - for unused local definitions&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wunused:explicits&lt;/code&gt; - for unused explicit parameters&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wunused:implicits&lt;/code&gt; - for unused implicit parameters (parameters in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using&lt;/code&gt; clauses)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wunused:params&lt;/code&gt; - for all unused method parameters&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wunused:all&lt;/code&gt; - for enabling all of the above lints&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;checking-for-discarded-values&quot;&gt;Checking for discarded values&lt;/h4&gt;

&lt;p&gt;Discarding non-unit values is usually the symptom of subtle mistakes. The compiler can now warn you about all discarded values saving you from bugs resulting from those hard-to-spot mistakes.&lt;/p&gt;

&lt;p&gt;In the following simplified example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;def failure: Either[String, Nothing] = Left(&quot;something broke&quot;)

def failedComputation: Either[String, Unit] =
  Right(()).map(_ =&amp;gt; failure)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the programmer, by mistake, used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; method instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;. The code still compiles, but due to value discarding, behaves unexpectedly, returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Right(())&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failedComputation&lt;/code&gt; method. If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wvalue-discard&lt;/code&gt; flag is enabled, the compiler will report the warning, saving the user from a potential bug.&lt;/p&gt;

&lt;h3 id=&quot;more-consistent-braceless-syntax&quot;&gt;More consistent braceless syntax&lt;/h3&gt;

&lt;p&gt;Braces around method parameters can now be replaced with a colon. This can lead to cleaner, shorter, and often more readable code in places like configuration DSLs or test case definitions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;def canFail(input: String): Try[List[String]] = Try:
  someComputation(input).flatMap: res =&amp;gt;
    val partial = moreComputation(res)
    andEvenMore(partial)

class TestSuite extends munit.FunSuite:
  test(&quot;the job doesn&apos;t fail&quot;):
    val job = canFail(&quot;some data&quot;)
    assert(job.isSuccess)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the record, the braceless syntax has been introduced in Scala 3.0.0. However, braces were still needed to pass function arguments. Martin Odersky proposed to address this point in the proposal &lt;a href=&quot;https://docs.scala-lang.org/sips/fewer-braces.html&quot;&gt;SIP-44 - Fewer braces&lt;/a&gt;, which was accepted by the SIP Committee in &lt;a href=&quot;https://docs.scala-lang.org/sips/results/2022-08-26-meeting.html&quot;&gt;August 2022&lt;/a&gt;. The final implementation was released as an experimental feature in &lt;a href=&quot;https://github.com/lampepfl/dotty/releases/tag/3.2.0&quot;&gt;Scala 3.2.0&lt;/a&gt; in September. Finally, in &lt;a href=&quot;https://docs.scala-lang.org/sips/results/2022-10-21-meeting.html&quot;&gt;October&lt;/a&gt;, the SIP Committee voted to promote it to a stable feature.&lt;/p&gt;

&lt;h3 id=&quot;boundary-and-break&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boundary&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Two new methods were added to the standard library: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boundary&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt;. They are safer and more expressive replacements for non-local returns, which were deprecated recently.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt; allows for a type-safe early escape from anywhere inside the block delimited by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boundary&lt;/code&gt; to its end, returning the passed value from the entire block.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;import util.boundary, boundary.break

def sumOfRoots(numbers: List[Double]): Option[Double] = boundary:
  val roots = numbers.map: n =&amp;gt;
    println(s&quot; * calculating square root for $n*&quot;)
    if n &amp;gt;= 0 then Math.sqrt(n) else break(None)
  Some(roots.sum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you run the above method, you will notice that it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; when any of the input elements is negative. Moreover, thanks to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boundary&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt;, you can see from the console output that it stops iterating after encountering the first negative element.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt; can jump out of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boundary&lt;/code&gt; in the function deeper on the stack. To make it safe, only functions with a matching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Label&lt;/code&gt; in their using clauses can break. This can be used to create isolated parts of an application with streamlined error handling. Library authors can abstract over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Label&lt;/code&gt;, creating a nice API for error handling or dealing with uncertain data.&lt;/p&gt;

&lt;h3 id=&quot;the-new-default-implementation-of-lazy-vals&quot;&gt;The new default implementation of lazy vals&lt;/h3&gt;

&lt;p&gt;Last but not least, we have changed the default implementation of lazy vals. The new implementation has better performance and is safer under parallel access. This may result in improvements in the performance of effect systems.&lt;/p&gt;

&lt;h2 id=&quot;should-i-update-to-scala-330&quot;&gt;Should I update to Scala 3.3.0?&lt;/h2&gt;

&lt;p&gt;If you are maintaining a standalone Scala 3 project without external projects depending on it, feel free to switch to Scala 3.3.0 at any moment. You will enjoy all the improvements in the newest version of the compiler.&lt;/p&gt;

&lt;p&gt;If you are a library author following semantic versioning, we advise you to update to Scala 3.3.0 in the next minor release of your project. Users of your library would also need to bump their compiler version to use the newest version of your library. If you have already published a minor version on 3.3.0 but learned about a critical vulnerability in your library, you should release a new patch release for the previous minor version of your library using the Scala version you had used before the bump (e.g. 3.2.2 or older). This patch can be consumed by all the users of previous versions of the library, no matter if they have already switched to 3.3.0 or not.&lt;/p&gt;

&lt;h3 id=&quot;known-incompatibility-stability-of-inline-parameters&quot;&gt;Known incompatibility: Stability of inline parameters&lt;/h3&gt;

&lt;p&gt;In Scala, only stable paths can be used as prefix in path-dependent types.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;class Outer:
  type Inner

val a = new Outer
val aInner: a.Inner = ???     // ok

var b = new Outer
// val bInner: b.Inner = ???  // error

def c = new Outer
// val cInner: c.Inner = ???  // error

def method(param: Outer): param.Inner = ???  // ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was a bug that resulted in the compiler assuming that all inline parameters are stable references. This could have led to unsound code being accepted by the compiler and potential runtime crashes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;inline def method(inline param: Outer): param.Inner // error in Scala 3.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Such pieces of code are now rejected by the compiler. The migration for that change is simple, as it only requires removing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline&lt;/code&gt; modifier &lt;strong&gt;from the parameter&lt;/strong&gt;. If the path-dependent type was used, it is safe to say that the intended behavior was to inline the method without inlining the parameter.&lt;/p&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Thank you to all the contributors who made the release of 3.3.0 possible&lt;/p&gt;

&lt;p&gt;According to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git shortlog -sn --no-merges 3.2.2..3.3.0&lt;/code&gt; these are:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   226 Martin Odersky
   106 Szymon Rodziewicz
    81 Dale Wijnand
    56 Nicolas Stucki
    52 Paul Coral
    48 Kamil Szewczyk
    45 Paweł Marks
    28 Florian3k
    28 Yichen Xu
    15 Guillaume Martres
    10 Michał Pałka
     9 Kacper Korban
     8 Fengyun Liu
     7 Chris Birchall
     7 rochala
     6 Sébastien Doeraene
     6 jdudrak
     5 Seth Tisue
     5 Som Snytt
     5 nizhikov
     4 Filip Zybała
     4 Jan Chyb
     4 Michael Pollmeier
     4 Natsu Kagami
     3 Anatolii Kmetiuk
     3 Jamie Thompson
     2 Adrien Piquerez
     2 Alex
     2 Dmitrii Naumenko
     2 Lukas Rytz
     2 Michael Pilquist
     2 Vasil Vasilev
     2 adampauls
     2 yoshinorin
     1 Alexander Slesarenko
     1 Chris Kipp
     1 Guillaume Raffin
     1 Jakub Kozłowski
     1 Jan-Pieter van den Heuvel
     1 Julien Richard-Foy
     1 Kenji Yoshida
     1 Matt Bovel
     1 Mohammad Yousuf Minhaj Zia
     1 Philippus
     1 Szymon R
     1 Tim Spence
     1 s.bazarsadaev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>sbt Plugins Community Repository</title>
    <link href="https://www.scala-lang.org/blog/2023/04/20/sbt-plugins-community-repository.html"/>
    <updated>2023-04-20T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2023/04/20/sbt-plugins-community-repository</id>
    <content type="html">&lt;p&gt;On the 7th of April 2023, many Scala builds stopped working because an outage affected the sbt community repository.
In this blog post, we describe the sbt community repository, report on the incident, and outline
actions taken so far. There will be more action in the future and a followup blog post.&lt;/p&gt;

&lt;p&gt;Update: we have announced our action plan on the &lt;a href=&quot;https://contributors.scala-lang.org/t/roadmap-for-the-sbt-community-repository/6195&quot;&gt;Contributors Forum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-incident&quot;&gt;The Incident&lt;/h2&gt;

&lt;p&gt;On the 7th of April 2023, many projects of the Scala ecosystem could not resolve
sbt plugins from the community repository &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo.scala-sbt.org&lt;/code&gt; anymore (examples
&lt;a href=&quot;https://github.com/sbt/sbt-dynver/issues/239#issuecomment-1499791434&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;https://github.com/playframework/playframework/issues/11675#issuecomment-1499869916&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;https://github.com/sbt/sbt/issues/7204&quot;&gt;here&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/spray/sbt-revolver/issues/112&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;retrospective&quot;&gt;Retrospective&lt;/h2&gt;

&lt;p&gt;To understand what happened, here is some background information. sbt plugins are packaged
as modules published to Ivy or Maven repositories. Historically, sbt plugins used to be
published primarily to the sbt community repository hosted on Bintray. However, in 2021,
JFrog &lt;a href=&quot;https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/&quot;&gt;sunsetted the Bintray
service&lt;/a&gt;.
Since then, JFrog has provided the Scala Center a cloud-hosted Artifactory instance for free.
As explained in the &lt;a href=&quot;https://eed3si9n.com/bintray-to-jfrog-artifactory-migration-status-and-sbt-1.5.1&quot;&gt;release notes of sbt
1.5.1&lt;/a&gt;,
this Artifactory instance is used as a read-only repository to host all the sbt
plugins that were published to the community repository at that time, but the recommendation
to plugin authors was to switch to the Maven Central repository.&lt;/p&gt;

&lt;p&gt;In practice, the Artifactory instance sponsored by JFrog expires automatically after a
year, and we have to explicitly ask for renewal. What happened the &lt;a href=&quot;https://github.com/sbt/sbt/issues/7202&quot;&gt;7th of
April&lt;/a&gt; is that the instance expired without
prior notice. Thankfully, Eugene Yokota, the maintainer of sbt, promptly asked JFrog to
renew the Artifactory instance, which they generously did. After a couple more technical
steps, everything was back to normal.&lt;/p&gt;

&lt;h2 id=&quot;current-state&quot;&gt;Current State&lt;/h2&gt;

&lt;p&gt;Thanks to the efforts of Eugene Yokota and the support from the company JFrog, the situation
is now back to normal: the read-only repository &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo.scala-sbt.org&lt;/code&gt; backed by an Artifactory
instance works again and all the Scala builds should be able to resolve their plugin
dependencies as before.&lt;/p&gt;

&lt;p&gt;However, as mentioned by Seth Tisue in &lt;a href=&quot;https://github.com/sbt/sbt/issues/7202#issuecomment-1500220344&quot;&gt;a
comment&lt;/a&gt;, the event
highlighted a weakness in the Scala ecosystem infrastructure.&lt;/p&gt;

&lt;p&gt;In practice, what do we rely on the sbt community repository for?&lt;/p&gt;

&lt;p&gt;The sbt community repository has two primary purposes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It hosts “old” versions of sbt plugins that may still be used today in Scala projects.
It is important to note that those sbt plugins are not necessarily that old. Some of
them are stable and they simply didn’t get a new release in the past two years,
meaning that they had no chance to migrate to Maven Central.&lt;/li&gt;
  &lt;li&gt;It also hosts the Linux packages (deb and rpm) of sbt releases. Note that that part
is not read-only: Eugene Yokota still publishes new sbt releases there. These
packages are used by all the Scala developers who install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt&lt;/code&gt; via a Linux package
manager (and by many Docker images that provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lastly, it also hosts old releases of sbt (before the 1.x era) and Play framework.&lt;/p&gt;

&lt;p&gt;For the record, here is the exhaustive list of URLs and their respective content:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases&lt;/code&gt; - sbt plugins for sbt 1.x, 0.13.x, 0.12.x etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://repo.typesafe.com/typesafe/ivy-releases&lt;/code&gt; - sbt main artifacts prior to sbt 1.x, and other artifacts such as Play.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://repo.scala-sbt.org/scalasbt/debian&lt;/code&gt; - sbt DEB installers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://repo.scala-sbt.org/scalasbt/rpm&lt;/code&gt; - sbt RPM installers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;The outage lasted less than 24 hours and impacted many developers. In
response to the incident, several members of the community started investigating
solutions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sbt/sbt/issues/7202#issuecomment-1500657923&quot;&gt;Matthias Kurz&lt;/a&gt;
looked at the sbt plugins that are used in his machine and that are currently
hosted only on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo.scala-sbt.org&lt;/code&gt;. He then created issues on the corresponding
GitHub repositories to migrate them to Maven Central, and even
submitted pull requests to perform that migration for some of those projects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/spray/sbt-revolver/issues/100#issuecomment-1500841604&quot;&gt;Johannes Rudolph&lt;/a&gt;,
&lt;a href=&quot;https://github.com/sbt/sbt-sdlc/pull/5&quot;&gt;Eugene Yokota&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/sbt/sbt-license-report/pull/52&quot;&gt;Chris Kipp&lt;/a&gt;
followed up by migrating the projects &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt-revolver&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt-sdlc&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt-license-report&lt;/code&gt; to Maven Central.&lt;/p&gt;

&lt;p&gt;We encourage every sbt plugin maintainer to publish their releases to Maven Central
if this is not the case already.&lt;/p&gt;

&lt;p&gt;Eugene Yokota, who is also the &lt;a href=&quot;https://github.com/scalacenter/advisoryboard/pull/120&quot;&gt;community
representative&lt;/a&gt; of the
Scala Center Advisory Board, submitted a
&lt;a href=&quot;https://github.com/scalacenter/advisoryboard/pull/120/files&quot;&gt;proposal to plan and manage the sbt community
repository&lt;/a&gt;.
While the proposal has not yet been approved by the Advisory Board, we,
the Scala Center, have started our own investigations to ensure
the continuity of the sbt ecosystem. We will let you know as soon as we settle
on a plan.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Faster Scala.js development with front-end tooling and new tutorials</title>
    <link href="https://www.scala-lang.org/blog/2023/04/18/faster-scalajs-development-with-frontend-tooling.html"/>
    <updated>2023-04-18T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2023/04/18/faster-scalajs-development-with-frontend-tooling</id>
    <content type="html">&lt;p&gt;In front-end work, it’s frustrating if you cannot immediately try out your changes.
In this post, we introduce &lt;a href=&quot;https://github.com/scala-js/vite-plugin-scalajs&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vite-plugin-scalajs&lt;/code&gt;&lt;/a&gt;, a new plugin that can reduce your Scala.js turnaround time from 10 seconds to under one.&lt;/p&gt;

&lt;p&gt;The release of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vite-plugin-scalajs&lt;/code&gt; is part of a larger goal to simplify the developer experience in Scala.js.
The JavaScript ecosystem features a lot of great tooling in that respect.
Together with the release of the plugin, we are publishing a new &lt;a href=&quot;https://www.scala-js.org/doc/tutorial/&quot;&gt;tutorial series to get started with Scala.js&lt;/a&gt;, in order to best leverage front-end tooling with Scala.js.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/blog/vite-plugin-scalajs-screencast.gif&quot; alt=&quot;vite-plugin-scalajs in action&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;past-approach-scalajs-bundler&quot;&gt;Past approach: scalajs-bundler&lt;/h2&gt;

&lt;p&gt;Several years ago, the Scala Center first developed &lt;a href=&quot;https://scalacenter.github.io/scalajs-bundler/index.html&quot;&gt;scalajs-bundler&lt;/a&gt;.
Broadly, its goal was similar to what we present today: to integrate Scala.js with JavaScript tooling, in particular &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;scalajs-bundler is an sbt plugin that provides settings and tasks to orchestrate npm and webpack invocations.
The main premise was that Scala.js developers would be using Scala tooling first.
JavaScript tooling would only handle dependency management and bundling.
With that premise, scalajs-bundler abstracts away npm and webpack to some extent, and is intended to be used from sbt.&lt;/p&gt;

&lt;p&gt;While that approach works well for a while, it does not scale well to deeper front-end development requirements.
Soon enough, scalajs-bundler had to add support for custom webpack configuration files.
Unfortunately, using that feature meant that the webpack configuration was actually spread across sbt- and webpack-style configuration.&lt;/p&gt;

&lt;p&gt;Moreover, scalajs-bundler was designed when Scala.js was only able to emit a single JS module.
Supporting a fast refresh cycle required hacks.
Therefore, it was used mainly to produce the final, minified, browser-compatible, bundle.&lt;/p&gt;

&lt;p&gt;As time passed, Scala.js got more features, and best practices for Scala.js development evolved.
In particular, the introduction of &lt;a href=&quot;http://www.scala-js.org/doc/project/module.html#module-splitting&quot;&gt;module splitting&lt;/a&gt; in Scala.js opened the possibility to leverage tools like Vite.
It became more common for Scala.js developers to use front-end tooling first.&lt;/p&gt;

&lt;h2 id=&quot;vite-and-its-usage-in-the-scalajs-community&quot;&gt;Vite and its usage in the Scala.js community&lt;/h2&gt;

&lt;p&gt;Last year, we surveyed what the best practices were among professional Scala.js users.
Several front-end build tools were mentioned, but &lt;a href=&quot;https://vitejs.dev/&quot;&gt;Vite&lt;/a&gt; seemed to be a popular choice.
Vite leverages native support of ECMAScript Modules in browsers to provide fast edit-refresh cycles.
When saving a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; source file, Vite detects the change and sends a refresh command to the browser, which only needs to parse the changed files.&lt;/p&gt;

&lt;p&gt;Building on ES Modules in this way provides a particularly nice opportunity for integration with Scala.js.
Indeed, Scala.js can turn Scala code into small ES modules.
Even better, we can configure it to provide few large modules for dependencies (which rarely change), and small modules for the application code (which changes often).
Assuming the application lives in the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my.app&lt;/code&gt;, the required configuration is&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scalaJSLinkerConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;withModuleKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ModuleKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;ESModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;withModuleSplitStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;ModuleSplitStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;SmallModulesFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my.app&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we edit and save a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scala&lt;/code&gt; file, a chain of incremental build steps is triggered:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Scala incremental compiler recompiles only that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scala&lt;/code&gt; file and produces the corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sjsir&lt;/code&gt; files (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; files of Scala.js).&lt;/li&gt;
  &lt;li&gt;The Scala.js incremental linker picks up the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sjsir&lt;/code&gt; files, incrementally re-optimizes the application, and rewrites only the target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; modules that have changed.&lt;/li&gt;
  &lt;li&gt;Vite picks up the changed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; files and asks the browser to reload them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to reinforce that effect, we brought significant performance improvements to the Scala.js linker in &lt;a href=&quot;https://www.scala-js.org/news/2023/04/10/announcing-scalajs-1.13.1/&quot;&gt;version 1.13.1&lt;/a&gt;, in particular in the incremental case.
Together with all the steps above being fully incremental, updating the UI of your application usually takes less than a second.&lt;/p&gt;

&lt;p&gt;Of course, &lt;a href=&quot;https://xkcd.com/1172/&quot;&gt;even performance improvements can break someone’s workflow&lt;/a&gt;.
One user complained that they “don’t even have time to take a sip of coffee between compiles” anymore.&lt;/p&gt;

&lt;h2 id=&quot;introducing-vite-plugin-scalajs&quot;&gt;Introducing vite-plugin-scalajs&lt;/h2&gt;

&lt;p&gt;To configure Vite to pick up the output of Scala.js, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastLinkJS&lt;/code&gt; for development mode and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullLinkJS&lt;/code&gt; for production mode, we released &lt;a href=&quot;https://github.com/scala-js/vite-plugin-scalajs&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vite-plugin-scalajs&lt;/code&gt;&lt;/a&gt;.
It is a plugin for Vite that directly connects it with a Scala.js sbt project (support for other Scala build tools will come later).&lt;/p&gt;

&lt;p&gt;After installing with&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; @scala-js/vite-plugin-scalajs@1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and enabling it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vite.config.js&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scalaJSPlugin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@scala-js/vite-plugin-scalajs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scalaJSPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can import the output of Scala.js from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ts&lt;/code&gt; files as follows:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;scalajs:main.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt;, the development mode of Vite, will automatically use the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastLinkJS&lt;/code&gt; in the Scala.js project.
Its production commands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run preview&lt;/code&gt; will use the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullLinkJS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this first version, a separate shell must be opened with sbt running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~fastLinkJS&lt;/code&gt; for development mode.
As the plugin gets more usage, we will enhance it so that it can keep the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~fastLinkJS&lt;/code&gt; itself in the background.&lt;/p&gt;

&lt;h2 id=&quot;new-tutorial-series&quot;&gt;New tutorial series&lt;/h2&gt;

&lt;p&gt;Together with the release of the plugin, we are also publishing a new &lt;a href=&quot;https://www.scala-js.org/doc/tutorial/&quot;&gt;tutorial series to get started with Scala.js&lt;/a&gt;.
This series covers the basics of starting a Scala.js project using Vite and the following technologies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://laminar.dev/&quot;&gt;Laminar&lt;/a&gt;, a UI framework for Scala.js based on Functional Reactive Programming, and&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scalablytyped.org/&quot;&gt;ScalablyTyped&lt;/a&gt;, a tool to automatically leverage TypeScript type definitions from Scala.js code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you prefer to watch content in video format, we have you covered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dv7fPmgFTNA&quot;&gt;Getting started with Scala js and Vite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UePrOa_1Am8&quot;&gt;Getting started with Scala.js, Laminar and ScalablyTyped&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you always wanted to test Scala.js but were afraid of getting started, now is a good time to try!
We also have a community of friendly and helpful people in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#scala-js&lt;/code&gt; channel of the &lt;a href=&quot;https://discord.com/invite/scala&quot;&gt;Scala Discord server&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We presented &lt;a href=&quot;https://github.com/scala-js/vite-plugin-scalajs&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vite-plugin-scalajs&lt;/code&gt;&lt;/a&gt;, a new plugin for Vite that wires it up with a Scala.js application.
Through nothing more than enabling the plugin in the Vite configuration, we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import &apos;scalajs:main.js&apos;&lt;/code&gt; to get access to the output of Scala.js.
Vite’s focus on module-based incremental updates combines particularly well with Scala’s and Scala.js’ own focus on incremental compilation and linking.
Together, they provide sub-second save-to-refresh cycles.&lt;/p&gt;

&lt;p&gt;In order to help users get started with Scala.js and Vite, we published a &lt;a href=&quot;https://www.scala-js.org/doc/tutorial/&quot;&gt;new tutorial series&lt;/a&gt;.
It shows step by step how to integrate Vite, Scala.js, Laminar and ScalablyTyped to build a front-end application.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>March 2023 - Scala Tooling Summit</title>
    <link href="https://www.scala-lang.org/blog/2023/04/11/march-2023-scala-tooling-summit.html"/>
    <updated>2023-04-11T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2023/04/11/march-2023-scala-tooling-summit</id>
    <content type="html">&lt;p&gt;&lt;img style=&quot;max-height: 350px; display: block; margin: auto; width: auto;&quot; src=&quot;/resources/img/march-2023-tooling-summit-stairs.jpg&quot; alt=&quot;Scala stairs with people standing on the stairs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tooling is a pivotal part of the developer experience. Often when someone asks
about a new language or how another developer enjoys working in a certain
language, it’s not long before the topic of tooling comes up. Questions like
“what’s the build tool like?” and “how’s the editor support?” are often some of
the first questions asked, after talking about language features.&lt;/p&gt;

&lt;p&gt;Earlier this year when the Center published the &lt;a href=&quot;https://scala-lang.org/blog/2023/01/31/scala-center-2023-roadmap.html&quot;&gt;2023 Scala Center
Roadmap&lt;/a&gt;
we mentioned our plans for a tooling summit this year. In the last few years a
global pandemic prohibited us from meeting in person and an all-consuming Scala
3 release effort that required extra effort on tooling identified a deep need
for something like this summit — to touch base, to map out current issues and
opportunities in the tooling ecosystem, and to re-lay the groundwork for ongoing
collaboration.&lt;/p&gt;

&lt;p&gt;With all this in mind, we’d like to share some updates from the recent summit
hosted by the &lt;a href=&quot;https://scala.epfl.ch/&quot;&gt;Scala Center&lt;/a&gt; at
&lt;a href=&quot;https://scala.epfl.ch/&quot;&gt;EPFL&lt;/a&gt; in Lausanne, Switzerland.&lt;/p&gt;

&lt;h2 id=&quot;who-was-there&quot;&gt;Who was there&lt;/h2&gt;

&lt;p&gt;What originally started out as a plan to better sync between those working on
the compiler and core tools at the Scala Center with those working on &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ
IDEA&lt;/a&gt; at JetBrains eventually blossomed into an
event with over 40 attendees from around the world representing all sorts of
companies and organization actively involved in the development and maintenance
of core tooling in the Scala ecosystem. Below you will find a list of some of
those companies and orgs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/com-lihaoyi&quot;&gt;com-lihaoyi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.epfl.ch/en/&quot;&gt;EPFL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lightbend.com&quot;&gt;Lightbend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lunatech.com/&quot;&gt;Lunatech&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflix.com/&quot;&gt;Netflix (Netflix Algorithms Engineering)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scala-sbt.org/&quot;&gt;sbt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala.epfl.ch/&quot;&gt;Scala Center&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalameta/&quot;&gt;Scalameta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://virtuslab.com/&quot;&gt;VirtusLab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.47deg.com/&quot;&gt;Xebia Functional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-we-talked-about&quot;&gt;What we talked about&lt;/h2&gt;

&lt;p&gt;The Tooling Summit was spread over three full days of sessions around teamwork,
de-duplication efforts, stabilization, and discussing the future of Scala
tooling. Much of this time was spent brainstorming, discussing, and even hacking
on various ideas that originated from a set of topics scheduled throughout the
summit. You can find a list of these topics below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure tooling can use structured diagnostics&lt;/li&gt;
  &lt;li&gt;JetBrains / Scala Center education collaboration&lt;/li&gt;
  &lt;li&gt;Scope and syntax of scala-cli using directives&lt;/li&gt;
  &lt;li&gt;Debugging in Scala 3&lt;/li&gt;
  &lt;li&gt;Bazel and Scala&lt;/li&gt;
  &lt;li&gt;Standardizing Scala worksheet implementations&lt;/li&gt;
  &lt;li&gt;The state of editor support for scala-cli&lt;/li&gt;
  &lt;li&gt;A discussion around BSP&lt;/li&gt;
  &lt;li&gt;Making tooling more robust&lt;/li&gt;
  &lt;li&gt;Limiting the ways to import a project into your IDE&lt;/li&gt;
  &lt;li&gt;Porting Scalameta to Scala 3&lt;/li&gt;
  &lt;li&gt;IDE support in “polyglot” projects that contain Scala&lt;/li&gt;
  &lt;li&gt;Tasty Query and its use-cases&lt;/li&gt;
  &lt;li&gt;Planning for sbt 2&lt;/li&gt;
  &lt;li&gt;Bringing the Compiler Academy format to tooling&lt;/li&gt;
  &lt;li&gt;Shared publishing implementations for build tools&lt;/li&gt;
  &lt;li&gt;Merge Bloop mainline and scala-cli’s fork of Bloop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many of these topics resulted in issues being created, PRs being started, and
new discussions and ideas popping up all around GitHub. Here’s a small overview
and summary of the topics and their outcomes:&lt;/p&gt;

&lt;h3 id=&quot;ensure-tooling-can-use-structured-diagnostics&quot;&gt;Ensure tooling can use structured diagnostics&lt;/h3&gt;

&lt;p&gt;We had a session on ensuring that the tooling around the ecosystem could
properly consume and utilize structured diagnostics that come straight from the
compiler. There was a talk on this subject during the past &lt;a href=&quot;https://scala.io/&quot;&gt;ScalaIO
conference&lt;/a&gt; by Chris Kipp called &lt;a href=&quot;https://youtu.be/ttJ58l-SVAk&quot;&gt;The Journey of a Dotty
diagnostic&lt;/a&gt;. While
&lt;a href=&quot;https://scala-cli.virtuslab.org/&quot;&gt;scala-cli&lt;/a&gt; already has some actionable
diagnostics that allow you to update an outdated using directive, during the
summit we talked about various “quick fixes” that the compiler could produce and
even had a rough prototype to illustrate this using IntelliJ by the end of the
summit!&lt;/p&gt;

&lt;p&gt;The idea would be that fixes like this can come directly from the compiler
ensuring that all tooling that interacts with it can benefit. You can follow the
progress on this work in &lt;a href=&quot;https://github.com/lampepfl/dotty/issues/14904&quot;&gt;this Dotty mega issue on structured
diagnostics&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;jetbrains--scala-center-education-collaboration&quot;&gt;JetBrains / Scala Center education collaboration&lt;/h3&gt;

&lt;p&gt;Both the Scala Center and JetBrains have educational efforts around helping
newcomers to Scala get familiar with the language and the ecosystem. They’re not
alone in this effort as multiple other companies like &lt;a href=&quot;https://www.47deg.com/technologies/scala/&quot;&gt;Xebia
Functional&lt;/a&gt; also have courses and
exercises to that end. As a result of this conversation there is a more concrete
focus on communicating around the ecosystem about educational initiatives and
also efforts to look more into utilizing tools like the &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-jetbrains-academy&quot;&gt;JetBrains Educations
Plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scope-and-syntax-of-scala-cli-using-directives&quot;&gt;Scope and syntax of scala-cli using directives&lt;/h3&gt;

&lt;p&gt;As scala-cli has is well on it’s way to becoming the new &lt;a href=&quot;https://contributors.scala-lang.org/t/sip-46-scala-cli-as-default-scala-command/5996/53&quot;&gt;default
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala&lt;/code&gt;command&lt;/a&gt;,
discussions around using directives continually come up. Questions such as what
should or shouldn’t be allowed, what format they should take, and what their
scope is are commonplace.  Here’s some links that were referenced around this
topic and some that were a result of this discussion:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://contributors.scala-lang.org/t/sip-46-scala-cli-as-default-scala-command/5996/1&quot;&gt;SIP 46 scala-cli as the default Scala command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/VirtusLab/using_directives&quot;&gt;The using_directives library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/VirtusLab/scala-cli/issues/1954&quot;&gt;Syntax issue around quoted strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/VirtusLab/scala-cli/issues/1958&quot;&gt;Camel case issue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/VirtusLab/scala-cli/issues/1959&quot;&gt;Target directive renaming issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;debugging-in-scala-3&quot;&gt;Debugging in Scala 3&lt;/h3&gt;

&lt;p&gt;Debugging in Scala is a complex domain. This makes it all the more important to
ensure we’re de-duplicating efforts where we can. The emergence of the
&lt;a href=&quot;https://github.com/scalacenter/scala-debug-adapter&quot;&gt;scala-debug-adapter&lt;/a&gt; is a
great example of de-duplicating the efforts around debugging for various tools.
As a result of this conversation there will be more work towards utilizing the
scala-debug-adapter in other tools that aren’t yet using it and also potentially
&lt;a href=&quot;https://github.com/scalacenter/scala-debug-adapter/issues/396&quot;&gt;inlining&lt;/a&gt; things
like the Scala 3 expression evaluator right into the Dotty codebase. Here are a
handful of other items that either came out of the discussion t the summit or
were referenced:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalacenter/scala-debug-adapter/issues/395&quot;&gt;Better expose and publish the Scala 3 step filter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalacenter/student-projects/issues/9&quot;&gt;Explore an interpreting evaluator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalameta/metals/issues/4445&quot;&gt;Start the debugger in Metals instead of the build server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalacenter/scala-debug-adapter/issues/397&quot;&gt;A collection formatter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalacenter/scala-debug-adapter/issues/398&quot;&gt;goto definition for functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bazel-and-scala&quot;&gt;Bazel and Scala&lt;/h3&gt;

&lt;p&gt;Many larger companies that use Scala are increasing their usage of
&lt;a href=&quot;https://bazel.build/&quot;&gt;Bazel&lt;/a&gt; for their polyglot mono-repo codebases. Many of
these companies have specific needs unique to very large codebases that often
result in bespoke solutions. The goal of this sessions was to discuss a few
different aspects of this by focusing on the following areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why use Bazel?&lt;/li&gt;
  &lt;li&gt;Competing implementations of rules_scala
    &lt;ul&gt;
      &lt;li&gt;https://github.com/bazelbuild/rules_scala&lt;/li&gt;
      &lt;li&gt;https://github.com/higherkindness/rules_scala&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Difficult IDE support compared to other tools like sbt or Gradle&lt;/li&gt;
  &lt;li&gt;Deployment strategies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While no concrete action has been taken yet, the conversation has started and
will be sure to continue moving forward.&lt;/p&gt;

&lt;h3 id=&quot;standardizing-scala-worksheet-implementations&quot;&gt;Standardizing Scala worksheet implementations&lt;/h3&gt;

&lt;p&gt;Currently in the Scala ecosystem we have 3 different approaches to worksheets:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IntelliJ worksheets (plain and interactive mode) which re-use functionality from the Scala REPL&lt;/li&gt;
  &lt;li&gt;Metals worksheets using &lt;a href=&quot;https://scalameta.org/mdoc/&quot;&gt;mdoc&lt;/a&gt; as an engine&lt;/li&gt;
  &lt;li&gt;Scastie which uses a custom macro implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This presents another great opportunity to de-duplicate the efforts here and
provide a solution that is closer to the compiler that can be re-used by other
tools. Here are a few outputs of the discussion:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A thread on
&lt;a href=&quot;https://youtrack.jetbrains.com/issue/SCL-21099/Modern-worksheets&quot;&gt;youtrack&lt;/a&gt;
has been created about modern worksheets in IntelliJ.&lt;/li&gt;
  &lt;li&gt;There will also be some research going into what a shared interface or
worksheets could look like inside of the Scala 3 compiler.&lt;/li&gt;
  &lt;li&gt;There will be some work to try and unify the way dependencies and scala
options are included in worksheets to better align with using directives &lt;a href=&quot;https://github.com/scalameta/metals-feature-requests/issues/308&quot;&gt;for
example&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://code.visualstudio.com/api/extension-guides/notebook&quot;&gt;VS Code Notebook
API&lt;/a&gt; will be
explored to see if it can produce better output than the current Metals
implementation with VS Code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-state-of-editor-support-for-scala-cli&quot;&gt;The state of editor support for scala-cli&lt;/h3&gt;

&lt;p&gt;Since &lt;a href=&quot;https://scala-cli.virtuslab.org/&quot;&gt;scala-cli&lt;/a&gt; is still quite new, much of
the conversation during this topic was getting all parties involved on the same
page about how scala-cli works, what limitations currently exist, and how we can
collectively tackle them. Here are a few action items and links from the
discussion:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issue/SCL-19718&quot;&gt;scala-cli support in IntelliJ Scala
Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;We’d like to ensure syntax highlighting works for using directives in all the
normal places you’d expect them to&lt;/li&gt;
  &lt;li&gt;We’d like to ensure there is solid single-file support in various editors when
using scala-cli. This is being looked into both in IntelliJ and Metals&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-discussion-around-bsp&quot;&gt;A discussion around BSP&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://build-server-protocol.github.io/&quot;&gt;Build Server Protocol (BSP)&lt;/a&gt; was
envisioned as a unified way to compile, run, test, etc your code in a way that
doesn’t make build clients or servers re-implement integrations for every tool
similar to how the Language Server Protocol
&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;(LSP)&lt;/a&gt; works with language
servers and your favorite text editor. While this started small with a single
client (IntelliJ) and server (Bloop), we now have multiple client and server
implementations for sbt, Mill, Bazel, Bloop, and more even extending to other
languages outside of the JVM. In order to ensure a healthy future for BSP we’ve
gone ahead and formalized the &lt;a href=&quot;https://github.com/build-server-protocol/build-server-protocol/pull/465&quot;&gt;team
structure&lt;/a&gt;
a bit, are in the process of migrating to a
&lt;a href=&quot;https://smithy.io/2.0/index.html&quot;&gt;Smithy&lt;/a&gt; as a &lt;a href=&quot;https://github.com/build-server-protocol/build-server-protocol/pull/426&quot;&gt;source of
truth&lt;/a&gt;,
and are actively exploring a smoother &lt;a href=&quot;https://build-server-protocol.github.io/docs/overview/server-discovery&quot;&gt;BSP
Discovery&lt;/a&gt;
process.&lt;/p&gt;

&lt;h3 id=&quot;making-tooling-more-robust&quot;&gt;Making tooling more robust&lt;/h3&gt;

&lt;p&gt;Having your tooling not work as expected is frustrating. Not knowing why it’s
not working is even more frustrating. This conversation surrounds ideas and
topics like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better logging&lt;/li&gt;
  &lt;li&gt;Telemetry&lt;/li&gt;
  &lt;li&gt;Fault tolerance&lt;/li&gt;
  &lt;li&gt;Stress testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a result of these conversations the Metals team will be exploring usage of
&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;Sentry&lt;/a&gt; to better track when things are going
wrong. The idea here would be to provide an experience similar to IntelliJ’s
&lt;a href=&quot;https://blog.jetbrains.com/yole/archives/000072.html&quot;&gt;Exception Analyzer&lt;/a&gt;.
&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;LSP&lt;/a&gt; also has a
&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#telemetry_event&quot;&gt;telemetry&lt;/a&gt;
event that could be utilized, but more research needs to be done here.&lt;/p&gt;

&lt;h3 id=&quot;limiting-the-ways-to-import-a-project-into-your-ide&quot;&gt;Limiting the ways to import a project into your IDE&lt;/h3&gt;

&lt;p&gt;Both Metals and IntelliJ users have multiple ways to import projects. This could
be simply choosing your build server in Metals, or choosing to use BSP at all in
IntelliJ. There are ongoing discussions and work going on in both of these tools
to make the getting started experience on a project more seamless no matter the
tool or project. For example you can see the discussion choosing a default build
server for metals
&lt;a href=&quot;https://github.com/scalameta/metals/discussions/4505#discussioncomment-4571546&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;porting-scalameta-to-scala-3&quot;&gt;Porting Scalameta to Scala 3&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://scalameta.org/&quot;&gt;Scalameta&lt;/a&gt; is a core part of the tooling ecosystem
being utilized by tools like Metals, Scalafmt, Scalafix, and mdoc. While
Scalameta can handle parsing Scala 3 code, it can’t be used as a library in
Scala 3 projects. The main hiccup in this effort is the extensive use of macros,
which aren’t easily migrated. The main outcome of this discussion was simply
better understanding the challenges involved, so that if someone is willing to
put in the time here, we have a &lt;a href=&quot;https://github.com/scalameta/scalameta/issues/2485&quot;&gt;starting
point&lt;/a&gt; and some research
done.&lt;/p&gt;

&lt;h3 id=&quot;ide-support-in-polyglot-projects-that-contain-scala&quot;&gt;IDE support in “polyglot” projects that contain Scala&lt;/h3&gt;

&lt;p&gt;Traditionally IntelliJ has been the leader in this front offering great support
for mixed JVM-language projects. However this is made trickier with tools that
may not always be well-supported in this context like sbt or Mill. There is a
new upcoming BSP plugin for IntelliJ this may offer a better level of support
for using Mill or sbt server for multi-language projects. On the Metals side,
this is made even more trickier as LSP isn’t traditionally used for mixed
multi-language projects. There will be some more research on seeing if it’s
possible to better integrate with the Java language servers. There is an ongoing
thread about this that can be followed
&lt;a href=&quot;https://github.com/scalameta/metals-feature-requests/issues/5&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tasty-query-and-its-use-cases&quot;&gt;Tasty Query and its use-cases&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scalacenter/tasty-query&quot;&gt;Tasty Query&lt;/a&gt; is a newer tool in the
ecosystem that is a compiler-independent way to semantically analyze TASTy
files. Some concrete actions items that came out of this session to be worked on
are below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalacenter/tasty-query/issues/272&quot;&gt;Add a way to render trees and types as Scala code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scalacenter/tasty-query/issues/273&quot;&gt;Identify/document which APIs are safe to use without a full classpath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;planning-for-sbt-2&quot;&gt;Planning for sbt 2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.scala-sbt.org/&quot;&gt;sbt&lt;/a&gt; is the most widely used build tool for Scala,
spanning small to giant projects. Many Scala developers daily interact with this
tool and its plethora of plugins. Due to this, a lot of effort has been going
into ensuring a smooth transition to sbt 2 which will boast a handful of new
features focused on simplicity, interactivity, and stability. &lt;a href=&quot;https://eed3si9n.com/&quot;&gt;Eugene
Yokota&lt;/a&gt; has put a ton of effort into this so far, so
here’s a dump of relevant blogs and discussion around this that may interest
you.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://eed3si9n.com/sbt-2.0-ideas&quot;&gt;sbt 2.0 ideas blog post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sbt/sbt/discussions/7174&quot;&gt;sbt 2.0 ideas discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eed3si9n.com/sbt-cache-ideas/&quot;&gt;RFC-1: sbt cache ideas blog post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sbt/sbt/discussions/7180&quot;&gt;sbt cache ideas discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eed3si9n.com/sbt-2.0-rfc-process&quot;&gt;RFC-2: sbt 2.0 RFC process blog post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sbt/sbt/discussions/7188&quot;&gt;RFC process discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eed3si9n.com/sbt-drop-custom-config/&quot;&gt;RFC-3: drop custom config blog post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sbt/sbt/discussions/7189&quot;&gt;drop custom config discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bringing-the-compiler-academy-format-to-tooling&quot;&gt;Bringing the Compiler Academy format to tooling&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://compileracademy.carrd.co/&quot;&gt;Compiler Academy&lt;/a&gt; has been an ongoing
effort to help onboard new contributors to the Scala 3 compiler. While the
format has been a success, it’s been difficult to get the amount of compiler
maintainers necessary to participate in the sprees. The discussion at the summit
focused on how to continue the effort to get more active participants in the
Scala 3 compiler development and also to look into taking the same format and
applying it to other tools in the Scala ecosystem.&lt;/p&gt;

&lt;h3 id=&quot;shared-publishing-implementations-for-build-tools&quot;&gt;Shared publishing implementations for build tools&lt;/h3&gt;

&lt;p&gt;Across the ecosystem many tools have their own implementation to publish an
artifact. For example, sbt, Mill, and scala-cli all use their own
implementations. During this topic
&lt;a href=&quot;https://github.com/coursier/publish&quot;&gt;coursier/publish&lt;/a&gt; was mentioned as a
possible library that could be utilized across the ecosystem. There were
multiple questions that would need to be answered first about the reality of
this possibility that are being tracked
&lt;a href=&quot;https://github.com/coursier/publish/issues/14&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;merge-bloop-mainline-and-scala-clis-fork-of-bloop&quot;&gt;Merge Bloop mainline and scala-cli’s fork of Bloop&lt;/h3&gt;

&lt;p&gt;For most users &lt;a href=&quot;https://scalacenter.github.io/bloop/&quot;&gt;Bloop&lt;/a&gt; should just be an
implementation detail. However, in the ecosystem we’ve frequently seen questions
and comments about how it works, and questions about why it works a certain way.
Some of the answers to these questions has led scala-cli to fork Bloop resulting
in 2 bloop servers often running on a user’s machine if they are a Metals user.
In order to combat this and provide a smoother Bloop experience for all users,
we discussed what would need to happen in order to merge the fork of Bloop back
inline. You can follow a thread on this effort
&lt;a href=&quot;https://github.com/VirtusLab/scala-cli/issues/1971&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-comes-next&quot;&gt;What comes next?&lt;/h2&gt;

&lt;p&gt;Overall, we consider the summit a success. With positive feedback from
participants and movement already visible on the topics above, we feel confident
that these efforts will result in a more stable, feature-rich, and unified
tooling ecosystem. The Scala Center will be continuing to facilitate and plan
further collaboration related to these topics and efforts.&lt;/p&gt;

&lt;p&gt;We’re also looking ahead to another summit that will coincide with the upcoming
&lt;a href=&quot;https://scaladays.org/&quot;&gt;Scala Days&lt;/a&gt; in Madrid. We’ll follow up on the
discussion topics above and also dive into new ones.&lt;/p&gt;

&lt;p&gt;There will be a discussion surrounding the content of this post on the
&lt;a href=&quot;https://contributors.scala-lang.org/&quot;&gt;contributors forum&lt;/a&gt;, so please engage
with questions or comments.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scala Center Roadmap for 2023 and Beyond</title>
    <link href="https://www.scala-lang.org/blog/2023/01/31/scala-center-2023-roadmap.html"/>
    <updated>2023-01-31T00:00:00+01:00</updated>
    <id>https://www.scala-lang.org/blog/2023/01/31/scala-center-2023-roadmap</id>
    <content type="html">&lt;p&gt;In this post, we summarize the achievements of the Scala Center in 2022, and share our plans going forward to
ensure the longevity of Scala.&lt;/p&gt;

&lt;h2 id=&quot;role-of-the-scala-center-in-the-scala-ecosystem&quot;&gt;Role of the Scala Center in the Scala Ecosystem&lt;/h2&gt;

&lt;p&gt;Overall, the mission of the Scala Center is to &lt;strong&gt;improve the experience of becoming and being a Scala developer&lt;/strong&gt;, and
to &lt;strong&gt;help the community to build a rich ecosystem of libraries&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Scala ecosystem is made of the following pillars:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Language, compiler, standard library:&lt;/strong&gt; they are the core tools that all programmers interact with when they
work in Scala. The role of the Scala Center is to reduce the number of bugs in the compiler implementation, to help
the community to contribute to these tools, and to make sure they evolve in a way that takes into account the needs
of the community.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation and MOOCs:&lt;/strong&gt; this website is the entry point to the ecosystem. It showcases the strengths of the
language and its use-cases, and it hosts all its documentation. The role of the Scala Center is to simplify the
structure and the content of the website, to create and maintain high-quality online educational content (including
online courses), and to help the community to contribute to the website.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Developer experience:&lt;/strong&gt; Scala programmers often don’t interact directly with the compiler, but they use a tool
(build tool, compile server) that does that for them. They also use tools to edit, analyze, navigate through,
transform, compile, run, and debug Scala programs. The role of the Scala Center is to make sure these tools are as
easy to use as possible, that they work reliably for everyone, and deliver a great developer experience.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Community and contributor experience:&lt;/strong&gt; the last pillar is the result of the work done &lt;em&gt;outside&lt;/em&gt; the Scala Center.
The community has created thousands of projects that bring simple solutions to complex problems. The role of the
Scala Center is to create the best environment for the emergence of such libraries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The remainder of this article summarizes our achievements in those four areas in 2022, and then presents our goals
going forward.&lt;/p&gt;

&lt;h2 id=&quot;highlights-of-2022&quot;&gt;Highlights of 2022&lt;/h2&gt;

&lt;p&gt;In this section, we highlight our main achievements in 2022. You can find our complete activity reports on
&lt;a href=&quot;https://scala.epfl.ch/records.html&quot;&gt;our website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;language-compiler-standard-library&quot;&gt;Language, Compiler, Standard Library&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We overhauled and restarted the &lt;a href=&quot;https://docs.scala-lang.org/sips/&quot;&gt;Scala Improvement Process&lt;/a&gt;.&lt;/strong&gt; Since last
summer, the SIP Committee members meet monthly to decide the evolution of the language. As we explained
in the &lt;a href=&quot;/blog/2022/07/13/scala-improvement-process-reloaded.html&quot;&gt;announcement&lt;/a&gt;, the main changes of
the new process are the following. Firstly, the proposals are thoroughly discussed by a team of three reviewers, publicly
on &lt;a href=&quot;https://github.com/scala/improvement-proposals&quot;&gt;GitHub&lt;/a&gt; before the whole Committee votes on them during their
monthly meetings. Second, there is a new stage where proposals are accepted as experimental features before the Committee
votes again to promote them to stable features. The new Scala Improvement Process is the first result of our governance
strategy whose goal is to establish all the necessary decision-making processes for the community, by the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We improved meta-programming, especially &lt;a href=&quot;https://docs.scala-lang.org/scala3/reference/contextual/derivation.html#mirror&quot;&gt;generic Mirror&lt;/a&gt;
synthesis.&lt;/strong&gt; Mirrors are critical to metaprogramming in Scala 3, they enable implementation of type class derivation without
advanced metaprogramming techniques such as macros. Mirror synthesis now supports more cases
(&lt;a href=&quot;https://github.com/lampepfl/dotty/pull/15250&quot;&gt;generic tuples&lt;/a&gt;,
&lt;a href=&quot;https://github.com/lampepfl/dotty/pull/15847&quot;&gt;local and inner classes&lt;/a&gt;), is more reliable
(&lt;a href=&quot;https://github.com/lampepfl/dotty/pull/15279&quot;&gt;dotty#15279&lt;/a&gt;,
&lt;a href=&quot;https://github.com/lampepfl/dotty/pull/15404&quot;&gt;dotty#15404&lt;/a&gt;,
&lt;a href=&quot;https://github.com/lampepfl/dotty/pull/15814&quot;&gt;dotty#15814&lt;/a&gt;), and provides
&lt;a href=&quot;https://github.com/lampepfl/dotty/pull/15164&quot;&gt;more detailed explanations in case of failure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We generalized the definition of methods in Scala&lt;/strong&gt; by allowing type parameters to be interleaved with regular parameters.
This change notably allows methods to take type parameters whose bounds depend on value parameters. You can learn more
about the motivation behind this change in the proposal document:
&lt;a href=&quot;https://docs.scala-lang.org/sips/clause-interleaving.html&quot;&gt;SIP-47 - Clause Interleaving&lt;/a&gt;. Lastly, we lifted a current
language restriction that prevents eta-expansion to be applied to polymorphic methods. You can learn more about this
change in the proposal document:
&lt;a href=&quot;https://docs.scala-lang.org/sips/polymorphic-eta-expansion.html&quot;&gt;SIP-49 - Polymorphic Eta-Expansion&lt;/a&gt;. Both proposals
have been accepted by the SIP Committee and are under development in the compiler.&lt;/p&gt;

&lt;h3 id=&quot;documentation-and-moocs&quot;&gt;Documentation and MOOCs&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We improved the usability of the Scala website (this website).&lt;/strong&gt; The website had not seen a major rework since 2013,
and it does not represent the full picture that we would like Scala newcomers to see. To this effect, we have removed
the split of Scala 2 vs Scala 3 on &lt;a href=&quot;https://github.com/scala/scala-lang/pull/1344&quot;&gt;the landing page&lt;/a&gt; and in
&lt;a href=&quot;https://github.com/scala/docs.scala-lang/pull/2430&quot;&gt;the documentation&lt;/a&gt;, consolidated the “Getting Started” instructions
(&lt;a href=&quot;https://github.com/scala/scala-lang/pull/1344&quot;&gt;scala-lang#1344&lt;/a&gt;,
&lt;a href=&quot;https://github.com/scala/scala-lang/pull/1348&quot;&gt;scala-lang#1348&lt;/a&gt;,
&lt;a href=&quot;https://github.com/scala/scala-lang/pull/1352&quot;&gt;scala-lang#1352&lt;/a&gt;,
&lt;a href=&quot;https://github.com/scala/scala-lang/pull/1373&quot;&gt;scala-lang#1373&lt;/a&gt;,
&lt;a href=&quot;https://github.com/scala/docs.scala-lang/pull/2388&quot;&gt;docs.scala-lang#2388&lt;/a&gt;,
&lt;a href=&quot;https://github.com/scala/docs.scala-lang/pull/2520&quot;&gt;docs.scala-lang#2520&lt;/a&gt;), improved the
&lt;a href=&quot;https://github.com/scala/docs.scala-lang/pull/2350&quot;&gt;contributing guide&lt;/a&gt;, and created an infrastructure to show both
Scala 2 and Scala 3 versions of code examples in the documentation
(&lt;a href=&quot;https://github.com/scala/docs.scala-lang/pull/2450&quot;&gt;docs.scala-lang#2450&lt;/a&gt;). We created an
&lt;a href=&quot;https://github.com/scala/docs.scala-lang/issues/2481&quot;&gt;issue&lt;/a&gt; to coordinate the update of the whole documentation to
always show both Scala 2 and Scala 3 code examples when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We offered individualized support to our MOOCs’ learners.&lt;/strong&gt; We published the course “Effective Programming in Scala”
to the &lt;a href=&quot;https://www.extensionschool.ch/learn/effective-programming-in-scala&quot;&gt;Extension School platform&lt;/a&gt;. This
platform allows the learners to have regular 1-on-1 meetings with our instructors along their learning journey. If you
need to learn Scala, or if your company needs to train developers, the Extension School provides a cost-effective way
to be trained by the Scala Center team. Learn
more about the motivation in the previous &lt;a href=&quot;/blog/2022/06/08/learn-scala-at-epfl-extension-school.html&quot;&gt;announcement&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;developer-experience&quot;&gt;Developer Experience&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We improved the debugger for Scala 3.&lt;/strong&gt; The Metals’ debugger is now able to evaluate arbitrary Scala 3 expressions
while the debugger is paused in the middle of a program. Step-by-step execution now automatically skips the methods
generated by the compiler (e.g. mix-in forwarders, getters, setters, bridge methods, and synthetic methods of case
classes). Learn more in &lt;a href=&quot;https://www.youtube.com/watch?v=UePrOa_1Am8&quot;&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We fixed the apps installed by the &lt;a href=&quot;https://docs.scala-lang.org/getting-started&quot;&gt;setup instructions&lt;/a&gt;.&lt;/strong&gt; The
command-line apps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala&lt;/code&gt; now behave consistently regardless of the installation process (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cs install&lt;/code&gt; vs
manual download of the release artifacts).&lt;/p&gt;

&lt;h3 id=&quot;community-and-contributor-experience&quot;&gt;Community and Contributor Experience&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We co-organized the &lt;a href=&quot;https://www.scalacon.org/&quot;&gt;ScalaCon&lt;/a&gt; online conference and participated in several in-person community
events.&lt;/strong&gt; In April 2022, for the first time in 2.5 years, events could finally take place in person. Our team encouraged
many Scala User Groups to restart their regular Scala Meetups. We gave talks and organized &lt;a href=&quot;https://github.com/scalacenter/sprees&quot;&gt;Open-Source Sprees&lt;/a&gt;
at local events in Europe. We were also involved in the online conference ScalaCon: we were in charge of the program and
the program committee, and we presented several talks including a keynote &lt;a href=&quot;https://youtu.be/svWnwU5PXxE&quot;&gt;Towards a Healthy &amp;amp; Resilient Scala Community&lt;/a&gt;
where we presented our strategy for the governance of Scala. The talk videos of the whole conference are available online
&lt;a href=&quot;https://www.youtube.com/playlist?list=PL3t6y1EktOPhflaXB28Kw7kwRb30K0W-P&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We published videos about Scala 3.&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/playlist?list=PLTx-VKTe8yLxYQfX_eGHCxaTuWvvG28Ml&quot;&gt;Let’s Talk About Scala 3&lt;/a&gt;
is a series of videos where we share interesting, useful, and cool things related to Scala 3. We published 4 new
videos in 2022.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We improved the code editing experience in &lt;a href=&quot;https://scastie.scala-lang.org&quot;&gt;Scastie&lt;/a&gt;.&lt;/strong&gt; Scastie is the online Scala
code editor that is used every day by one thousand developers to share code snippets in the community. We have 
implemented “IDE features” such as autocompletion and showing type information under the mouse pointer. Under the hood,
we reused some components of Metals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We mentored new contributors to the Scala 3 compiler.&lt;/strong&gt; The Compiler
Academy organizes online pair-programming events to mentor new contributors on the compiler codebase. You can learn
more about the Compiler Academy in &lt;a href=&quot;/blog/2022/11/02/compiler-academy.html&quot;&gt;this blog article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We implemented the building blocks of a new tool to detect incompatibilities between programs.&lt;/strong&gt; Guaranteeing the
absence of incompatibilities between library dependencies is the cornerstone of a seamless Scala ecosystem. We have
implemented a prototype of a new tool to detect incompatibilities between two versions of a program (like
&lt;a href=&quot;https://github.com/lightbend/mima&quot;&gt;MiMa&lt;/a&gt;, but based on the TASTy representation of programs instead of JVM bytecode).
We explained &lt;a href=&quot;https://github.com/scalacenter/tasty-mima#motivation&quot;&gt;here&lt;/a&gt; why we need this tool in addition to the
classic MiMa.
Our work is based on &lt;a href=&quot;https://github.com/scalacenter/tasty-query&quot;&gt;TASTy Query&lt;/a&gt;, which will be the basis of tools to
perform static analysis of Scala programs (it is already used by the Metals debugger).&lt;/p&gt;

&lt;h2 id=&quot;roadmap-for-2023-and-beyond&quot;&gt;Roadmap for 2023 (and Beyond)&lt;/h2&gt;

&lt;p&gt;It is now time to look forward and present our goals for 2023. Our mission remains the same: improve the experience of
becoming and being a Scala developer, and help the community to build a rich ecosystem of libraries. Ultimately, our
work will ensure the longevity of Scala by creating a reliable and resilient ecosystem.&lt;/p&gt;

&lt;p&gt;We have identified the priorities for 2023 through our discussions with the community (online or at conferences),
with our &lt;a href=&quot;https://scala.epfl.ch/#advisory-board-member-list&quot;&gt;Advisory Board members&lt;/a&gt;, and with the
main organizations that are &lt;a href=&quot;https://www.scala-lang.org/community/#whos-behind-scala&quot;&gt;behind Scala&lt;/a&gt;
(&lt;a href=&quot;https://lamp.epfl.ch&quot;&gt;LAMP&lt;/a&gt;, &lt;a href=&quot;https://lightbend.com&quot;&gt;Lightbend&lt;/a&gt;, and &lt;a href=&quot;https://virtuslab.com&quot;&gt;VirtusLab&lt;/a&gt;). We are
grateful to all of them.&lt;/p&gt;

&lt;p&gt;In the following subsections we remind you of our ongoing and recurring projects, and we present our most important goals as
well as some additional stretch goals that would need more resources.&lt;/p&gt;

&lt;p&gt;The roadmap we present here is of course subject to adjustments throughout the year.&lt;/p&gt;

&lt;h3 id=&quot;language-compiler-standard-library-1&quot;&gt;Language, Compiler, Standard Library&lt;/h3&gt;

&lt;p&gt;In addition to keeping the Scala Improvement Process ongoing, and reducing the number of bugs in the compiler and standard
library, we will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Make the compiler error messages clearer and more actionable.&lt;/strong&gt; The compiler should help developers write correct code
instead of “just complaining” about incorrect code. The compiler should also guide you to write maintainable code (ie,
it should provide linting features). You can find a list of related issues
&lt;a href=&quot;https://github.com/lampepfl/dotty/issues?q=is%3Aopen+is%3Aissue+label%3Aarea%3Areporting&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bring the compiler’s suggestions into the IDEs.&lt;/strong&gt; Instead of emitting only text output, the compiler
will produce structured output that IDEs (Metals and IntelliJ) will be able to read to automatically provide “quick
fixes” to the users. This should reduce the implementation (and maintenance) costs on the IDE side.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unfreeze the Scala standard library.&lt;/strong&gt; The standard library has not changed (except for bug fixes or some performance
improvements) since Scala 2.13, which was released almost four years ago. &lt;a href=&quot;https://github.com/scala/improvement-proposals/pull/54&quot;&gt;Dropping the forwards binary compatibility
requirement&lt;/a&gt; would be a first step to allow the introduction
of new classes or the addition of new members to the existing classes. Then, we will create a process to validate
what should be in the standard library and what should stay outside of it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Clarify and communicate the Scala 3 roadmap.&lt;/strong&gt; We will coordinate with the compiler team to clarify what will
go into the &lt;a href=&quot;/blog/2022/08/17/long-term-compatibility-plans.html&quot;&gt;Long-Term Support version&lt;/a&gt;
of Scala 3, and make sure that roadmap is well communicated. We will focus primarily on the items that will
enable more users to migrate from Scala 2 to Scala 3 (e.g., missing compiler options).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our stretch goals include: publish a formal specification for Scala 3, investigate opportunities for reducing
compilation times, implement multi-threading in Scala Native, and remove the dependency to the Google Closure
Compiler in Scala.js.&lt;/p&gt;

&lt;h3 id=&quot;documentation-and-moocs-1&quot;&gt;Documentation and MOOCs&lt;/h3&gt;

&lt;p&gt;In addition to maintaining the Scala website and managing our online course learners, we will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Add “task-oriented” content to the documentation.&lt;/strong&gt; Currently, the documentation is rather “language features oriented”,
but it does not really help solve concrete problems. We will select a set of libraries (the “Scala Toolkit”) and we
will write tutorials showing how to perform common programming tasks (working with JSON, writing tests, etc.).
We will use libraries created by the community and that do not require advanced knowledge of Scala. Lastly, we will
help the authors of those libraries to perform the usual maintenance tasks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Improve the content of the course
&lt;a href=&quot;https://docs.scala-lang.org/online-courses.html#effective-programming-in-scala&quot;&gt;Effective Programming in Scala&lt;/a&gt;.&lt;/strong&gt;
We will address the feedback we received from the learners of the course to smooth the learning curve.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our stretch goals include: update our &lt;a href=&quot;https://docs.scala-lang.org/online-courses.html#scala-specialization&quot;&gt;Spark course&lt;/a&gt;,
teach Scala to first year Bachelor students at EPFL, and create a new Scala course for beginners (with no experience at
all in programming).&lt;/p&gt;

&lt;h3 id=&quot;developer-experience-1&quot;&gt;Developer Experience&lt;/h3&gt;

&lt;p&gt;In addition to maintaining some core tools of the ecosystem (Bloop, Coursier, sbt, scala-debug-adapter), we will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Streamline the distribution of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cs&lt;/code&gt; (Coursier).&lt;/strong&gt; The current setup process is not well integrated with the various
operating systems. There are no packages for Linux distributions, no MSI installer for Windows, and no PKG or DMG
installer for macOS.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduce the number of ways to import Scala projects in IDEs.&lt;/strong&gt; Currently, IDEs support several ways for importing
Scala projects (via sbt or via a build server, which itself can be provided by bloop or the underlying build tool).
This is a source of confusion for the users, and it increases the maintenance costs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make Metals work with more versions of Scala.&lt;/strong&gt; By creating a stable interface for the presentation compiler,
Metals will be less tied to the release cycles of the compiler, and it will easier to use it to develop the
compiler itself.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Improve the Scala 3 support on Metals and IntelliJ.&lt;/strong&gt; We heard many developers stating that the Scala 3 support
in IDEs was not at the same level as Scala 2, and that is one of the blockers to migrate to Scala 3. We will
identify and put weigh on the main issues that currently degrade the developer experience on Scala 3 projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our stretch goals include: support standalone .scala files out of the box in Metals and IntelliJ (including support
for Scala CLI configuration directives), investigate opportunities to reduce build times, reduce the maintenance costs
of implementing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debugSession/start&lt;/code&gt; endpoint in all the build servers by running the debug server in Metals,
update scalameta to Scala 3, publishing sbt 2, implement a Scala 2 expression evaluator in scala-debug-adapter,
be able to choose a specific build target in Metals, make sure Scala programs are easy to deploy especially in IaaS,
and provide TASTy trees to semantic rules in Scalafix.&lt;/p&gt;

&lt;h3 id=&quot;community-and-contributor-experience-1&quot;&gt;Community and Contributor Experience&lt;/h3&gt;

&lt;p&gt;In addition to participating to events, encouraging and supporting local Scala user groups and Scala conferences around
the world, publishing positive content about Scala, leading the Compiler Academy, coordinating the Google Summer of
Code, and maintaining tools for contributors (&lt;a href=&quot;https://scastie.scala-lang.org&quot;&gt;Scastie&lt;/a&gt;,
&lt;a href=&quot;https://index.scala-lang.org&quot;&gt;Scaladex&lt;/a&gt;, &lt;a href=&quot;https://scalacenter.github.io/scalafix/&quot;&gt;scalafix&lt;/a&gt;), we will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Co-organize &lt;a href=&quot;https://scaladays.org/&quot;&gt;Scala Days&lt;/a&gt;.&lt;/strong&gt; We will be responsible for the program and co-located events,
such as ScalaBridge, Scala Spree, and other community summits. The conference will take place June 4th-7th in Seattle,
USA, and September 11th-14th in Madrid, Spain.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organize a Tooling Summit.&lt;/strong&gt; We will bring together the main actors of the tooling ecosystem (IntelliJ team, Metals
team, compiler team, build tools maintainers), and agree on the next steps for a reliable and seamless integration
of the pieces of the tooling ecosystem.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Add support for standalone Scala programs in Scastie.&lt;/strong&gt; Currently, Scastie creates an sbt project for every snippet.
This adds a performance overhead, and makes it impossible to just copy-paste a snippet to run it locally (because
you also need to re-create the sbt configuration locally). We will fix this issue by supporting a “standalone” mode
where the configuration will be defined via Scala CLI directives.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Publish TASTy-MiMa.&lt;/strong&gt; This tool will be able to detect incompatibilities between two versions of a program, based
on their TASTy representation. We will complete its implementation and make it available to the community.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our stretch goals include: create a Scala Center online shop, finalize the training materials for Scala moderators, revise
and update the Scala Center bylaws, stabilize and document the HTTP API of Scaladex, make it easy to find projects to
contribute to in Scaladex, streamline the way to publish the documentation of Scala libraries, implement GitHub &lt;a href=&quot;https://docs.github.com/en/repositories/working-with-files/using-files/navigating-code-on-github#precise-and-search-based-navigation&quot;&gt;precise code
navigation&lt;/a&gt;
for Scala, and simplify the usage of remote caching techniques in continuous integration systems.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we have looked at the pillars of the Scala ecosystem, and for each of them we have listed the main
outcome of our work in 2022, and our main goals for 2023.&lt;/p&gt;

&lt;p&gt;Thanks to your support, and with the help of all the &lt;a href=&quot;https://www.scala-lang.org/community/#whos-behind-scala&quot;&gt;people behind Scala&lt;/a&gt;,
we came this far! Help us go even further by &lt;a href=&quot;https://scala.epfl.ch/faqs.html&quot;&gt;supporting the Scala Center&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find our detailed roadmap for the current quarter &lt;a href=&quot;https://scala.epfl.ch/projects.html&quot;&gt;here&lt;/a&gt;,
and track our progress by looking at our &lt;a href=&quot;https://scala.epfl.ch/records.html&quot;&gt;quarterly reports&lt;/a&gt;, or by browsing the
&lt;a href=&quot;https://contributors.scala-lang.org/c/scala-center/25&quot;&gt;Scala Center Updates&lt;/a&gt; category of the Scala Contributors forum.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Eugene Yokota Joins the Scala Center’s Advisory Board as a new Community Representative</title>
    <link href="https://www.scala-lang.org/blog/2023/01/10/new-ab-community-rep.html"/>
    <updated>2023-01-10T00:00:00+01:00</updated>
    <id>https://www.scala-lang.org/blog/2023/01/10/new-ab-community-rep</id>
    <content type="html">&lt;p&gt;On behalf of the Scala Center Advisory Board I’d like to welcome Eugene Yokota
as a new community representative to the advisory board.&lt;/p&gt;

&lt;p&gt;During the past year following &lt;a href=&quot;https://github.com/scalacenter/advisoryboard/blob/main/proposals/028-community-delegate-terms.md&quot;&gt;The Community Delegate Terms
proposal&lt;/a&gt; both of our previous community reps, &lt;a href=&quot;https://www.scala-lang.org/blog/2016/04/29/sc-community-representative.html&quot;&gt;Bill
Venners&lt;/a&gt; and &lt;a href=&quot;https://www.scala-lang.org/blog/2019/03/18/announcing-new-community-representative.html&quot;&gt;Rob Norris&lt;/a&gt;, stepped down in
order to make way for the next generation of community reps. I’d like to extend
the board’s gratitude for the tremendous dedication and support both Bill and
Rob offered the board over the years. Bill has served the board since 2016 and
Rob since 2019.&lt;/p&gt;

&lt;p&gt;In light of the Community Delegate Terms proposal, four out of eleven Scala
Center Advisory board members formed a working group to review recommendations
from the board for the next community rep.&lt;/p&gt;

&lt;p&gt;Some key questions that were considered when looking at the recommendations were:&lt;/p&gt;

&lt;p&gt;Does this person:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;have a history of contributions to the Scala community? (technical and/or non-technical)&lt;/li&gt;
  &lt;li&gt;have a history of community engagement?&lt;/li&gt;
  &lt;li&gt;bring a diverse perspective and representation to the board?&lt;/li&gt;
  &lt;li&gt;have a collaborative mindset?&lt;/li&gt;
  &lt;li&gt;believe in the values and mission of the Scala Center?&lt;/li&gt;
  &lt;li&gt;have a broad interest in the Scala community as a whole?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We considered these questions in light of what the expectation for a community
representative are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spokesperson for the Scala community at Advisory Board quarterly meetings&lt;/li&gt;
  &lt;li&gt;Gathering and expressing community’s opinion on certain topics related to Scala Center proposals&lt;/li&gt;
  &lt;li&gt;Point of contact for community members/groups to review and help shaping community proposals&lt;/li&gt;
  &lt;li&gt;Presents and defends community proposals at AB meetings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all this in mind last November we made the decision on the nomination, and
we’re happy to introduce Eugene, who has been a dedicated enthusiast in the
Scala community for years. Mostly known for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being the lead maintainer of &lt;a href=&quot;https://www.scala-sbt.org/&quot;&gt;sbt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;His &lt;a href=&quot;https://eed3si9n.com/&quot;&gt;blog&lt;/a&gt;, writing, and &lt;a href=&quot;https://eed3si9n.com/herding-cats/&quot;&gt;tutorials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;His many talks and workshops given at various conferences&lt;/li&gt;
  &lt;li&gt;Community work in helping organize the &lt;a href=&quot;https://scalamatsuri.org/en/&quot;&gt;Scala Matsuri&lt;/a&gt; conferences&lt;/li&gt;
  &lt;li&gt;His endless mentoring online and beyond&lt;/li&gt;
  &lt;li&gt;His tireless involvement and focus on ensuring diversity and inclusion are at
the forefront of events and in our community, ultimately making Scala a safer
more welcoming environment for all&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We trust that Eugene will be a valuable addition to the board for his technical
ability, his dedication to diversity and inclusion, and his willingness to
engage with the community to bring positive change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reminder&lt;/strong&gt; that all the Scala Center quarterly reports and board meeting
notes are public. You can find them &lt;a href=&quot;https://scala.epfl.ch/records.html&quot;&gt;here&lt;/a&gt;. You can also find the
current Scala Center quarterly roadmap &lt;a href=&quot;https://scala.epfl.ch/projects.html&quot;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;&lt;em&gt;Note from the Executive Director&lt;/em&gt;: As we are publishing this blog post, we
are aware that in December 2022 Eugene has publicly &lt;a href=&quot;https://eed3si9n.com/support-scala-center-2022/&quot;&gt;donated&lt;/a&gt; to the
Center. The decision to invite Eugene was made prior to this event and in no
relation to it. We greatly appreciate the gesture, and underline for the readers
that the community representative at the Scala Center advisory board is by
invitation only, it is unpaid position, and with no donation is required.&lt;/sub&gt;&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Thank you for taking part in Advent of Code 2022!</title>
    <link href="https://www.scala-lang.org/blog/2023/01/06/advent-of-code-recap.html"/>
    <updated>2023-01-06T00:00:00+01:00</updated>
    <id>https://www.scala-lang.org/blog/2023/01/06/advent-of-code-recap</id>
    <content type="html">&lt;p&gt;Happy New Year everyone! We would like to take some time in this blog post to thank everyone from the Scala community and beyond who took part in the Advent of Code challenge this year! We are also thrilled to see all the related activity in our &lt;a href=&quot;https://discord.com/channels/632150470000902164/913451015246868530&quot;&gt;Discord channel&lt;/a&gt; on the &lt;a href=&quot;https://discord.com/invite/scala&quot;&gt;Scala Discord&lt;/a&gt; and &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/&quot;&gt;Scala Advent of Code website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To recap, &lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt;, started by &lt;a href=&quot;http://was.tl/&quot;&gt;Eric Wastl&lt;/a&gt;, is a yearly event providing daily programming puzzles between December 1st and December 25th.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you read on you will see how the Scala community participated in the challenge, and also see how to help us write articles on solving each puzzle in a &lt;strong&gt;simple Scala&lt;/strong&gt; coding style (see Martin Odersky’s keynote talk &lt;a href=&quot;https://www.youtube.com/watch?v=QRcD9Zc7eq4&quot;&gt;Simply Scala&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;the-scala-communities-engagement&quot;&gt;The Scala communities’ engagement&lt;/h2&gt;

&lt;p&gt;This year it was great to see over 40+ of you in the &lt;a href=&quot;https://discord.com/channels/632150470000902164/913451015246868530&quot;&gt;advent-of-code channel&lt;/a&gt; of the &lt;a href=&quot;https://discord.com/invite/scala&quot;&gt;Scala Discord server&lt;/a&gt;! You participated daily, shared and discussed solutions, and challenged each other to find more performant or concise solutions.&lt;/p&gt;

&lt;p&gt;We would also like to thank everyone who contributed your solutions to be displayed on our refreshed &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/&quot;&gt;Scala Advent of Code 2022 website&lt;/a&gt;! This year, we had 164 contributed solutions from the community, and over 5000 visitors to the website! (compared to 800 visitors last year) We’re especially thankful for those of you who additionally volunteered to write &lt;strong&gt;whole articles&lt;/strong&gt; to explain your solution! (see &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day10&quot;&gt;Day 10&lt;/a&gt;, &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day18&quot;&gt;Day 18&lt;/a&gt;, and &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day24&quot;&gt;Day 24&lt;/a&gt;)!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/blog/aoc-2022-recap/daily-solution-count.svg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/resources/img/blog/aoc-2022-recap/daily-visitor-count.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’d also like to thank &lt;a href=&quot;https://petr-zapletal.medium.com/this-week-in-scala-dec-19-2022-2c35186d6bdd&quot;&gt;This Week in Scala&lt;/a&gt; and &lt;a href=&quot;https://scalatimes.com/a436388b6d&quot;&gt;Scala Times&lt;/a&gt; for sharing our website which helped boost visits!&lt;/p&gt;

&lt;h2 id=&quot;help-us-to-document-the-solutions&quot;&gt;Help us to document the solutions&lt;/h2&gt;

&lt;p&gt;Just because it’s now the new year, it doesn’t mean we have totally wrapped up Advent of Code! At the Scala Center, we think that the Advent of Code challenge is the perfect opportunity to demonstrate to the world that programming with Scala can be simple and fun! (reminder: see Martin Odersky’s &lt;a href=&quot;https://www.youtube.com/watch?v=QRcD9Zc7eq4&quot;&gt;keynote talk&lt;/a&gt;.) So we want to continue as we did in 2021 and completely document the solutions in a simple and approachable coding style; and we are reaching out to the community to help us.&lt;/p&gt;

&lt;p&gt;As of publishing, we are still missing code snippets in articles for days &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day14&quot;&gt;14&lt;/a&gt;, &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day16&quot;&gt;16&lt;/a&gt;, &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day17&quot;&gt;17&lt;/a&gt;, &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day19&quot;&gt;19&lt;/a&gt;, &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day20&quot;&gt;20&lt;/a&gt;, &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day22&quot;&gt;22&lt;/a&gt;, and &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/puzzles/day23&quot;&gt;23&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like to directly contribute code snippets for one of your puzzle solutions, you can click &lt;strong&gt;“Edit this page”&lt;/strong&gt; at the bottom of a puzzle page; it will take you to GitHub where you can add your code to the page. If you feel adventurous you could even write the article to explain your solution.&lt;/p&gt;

&lt;p&gt;Instead if you would only like to share a link to your solution, you can edit the page to add a link under the section “Solutions from the community”. If your linked solution includes an Apache 2 compatible licence, this will also help others to write code snippets for the articles.&lt;/p&gt;

&lt;p&gt;Anything you contribute will be massively appreciated!&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;If you read this far, thank you again everyone for contributing to Scala and participating in Advent of Code, we hope you all had fun!&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Scala Developer Survey 2022 Results</title>
    <link href="https://www.scala-lang.org/blog/2022/12/14/scala-developer-survey-results-2022.html"/>
    <updated>2022-12-14T00:00:00+01:00</updated>
    <id>https://www.scala-lang.org/blog/2022/12/14/scala-developer-survey-results-2022</id>
    <content type="html">&lt;p&gt;The Scala Developer Survey 2022 was launched in October, and in ten days it attracted over 2200 responses. Today we are pleased to share the results with you.&lt;/p&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;

&lt;p&gt;Scala 3 was released in May 2021, and we captured the community’s expectations at the time in the &lt;a href=&quot;/2021/03/08/scala-3-developers-preview-survey-results.html&quot;&gt;“Scala Developer’s Preview Survey”&lt;/a&gt;. For the Scala team, the last year and a half was quite dynamic - figuring out the long-term compatibility (&lt;a href=&quot;/blog/2022/08/17/long-term-compatibility-plans.html&quot;&gt;blog&lt;/a&gt;), restarting the Scala Improvement Process (&lt;a href=&quot;/blog/2022/07/13/scala-improvement-process-reloaded.html&quot;&gt;blog&lt;/a&gt;), and releasing many new versions, most recently Scala 3.2.1 (&lt;a href=&quot;/blog/2022/11/07/scala-3.2.1-released.html&quot;&gt;blog&lt;/a&gt;). All this work has influenced the Scala ecosystem, from tooling to education and more - but in which ways?&lt;/p&gt;

&lt;p&gt;This year’s State of Scala Survey is one of the sources that will inform the Scala team, answer that question, and help decide which should be its priorities in 2023.&lt;/p&gt;

&lt;h2 id=&quot;at-glance-main-take-aways&quot;&gt;At glance: main take-aways&lt;/h2&gt;

&lt;p&gt;Looking between 2019 and today, it is exciting to see the shift in adoption of each major Scala release. 2.13 has traded places with 2.12 to become the majority Scala version (&lt;strong&gt;80%&lt;/strong&gt; as reported in the survey) and 2.12 (&lt;strong&gt;35%&lt;/strong&gt;) has swapped with 2.11, such that 2.11 is now a significant minority (&lt;strong&gt;7%&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;It is also great news to see such high adoption (&lt;strong&gt;40%&lt;/strong&gt;) of Scala 3. In May 2021, the Scala community anticipated the release of Scala 3.0.0. There were many concerns about if the ecosystem could catch up, and if migration would be difficult. We hope that confidence to adopt was boosted thanks to our collaboration with library maintainers; support in tools such as &lt;a href=&quot;https://docs.scala-lang.org/scala3/guides/migration/compatibility-classpath.html#the-scala-213-tasty-reader&quot;&gt;Scala 2.13-3.x forward compatibility&lt;/a&gt;; and migration assistants such as the &lt;a href=&quot;https://docs.scala-lang.org/scala3/guides/migration/compatibility-intro.html&quot;&gt;migration guide&lt;/a&gt; and the &lt;a href=&quot;https://index.scala-lang.org/scalacenter/scala3-migrate&quot;&gt;scala3-migrate&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;Most recently, we have even seen established community-lead projects, such as Lichess, adopt Scala 3. Which after a minor setback, is now smoothly running Scala 3 in production (see their &lt;a href=&quot;https://lichess.org/@/thibault/blog/lichess--scala-3/y1sbYzJX&quot;&gt;blog post&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;What else? The survey has given us a great overview of the libraries used in the ecosystem, and respondents’ confidence in them (read the &lt;a href=&quot;https://virtuslab.com/blog/scala-survey-2022&quot;&gt;&lt;strong&gt;VirtusLab blog post&lt;/strong&gt;&lt;/a&gt; for an analysis of this). Further, we invite you to try &lt;a href=&quot;https://index.scala-lang.org/awesome&quot;&gt;Scaladex&lt;/a&gt; to discover all the awesome Scala libraries that are available.&lt;/p&gt;

&lt;p&gt;We are also excited to see that &lt;strong&gt;20.6%&lt;/strong&gt; of respondents are looking forward to further development in Scala Native, which we are actively developing - that will also address concerns such as memory usage (&lt;strong&gt;25%&lt;/strong&gt; reported) and cloud services support (&lt;strong&gt;9%&lt;/strong&gt; reported).&lt;/p&gt;

&lt;p&gt;In the next two sections we will share more:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;About the survey
    &lt;ul&gt;
      &lt;li&gt;contains all information about creating the survey and collecting data.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Presenting the data
    &lt;ul&gt;
      &lt;li&gt;highlighting five questions in this blog post, while the rest can be downloaded as a PDF file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We encourage you to read on to learn how the survey was constructed and see the results, this way you can draw your own conclusions.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;button&quot; href=&quot;/resources/img/blog/survey-2022-results/scala_survey_2022_results.pdf&quot; download=&quot;&quot;&gt;&lt;i class=&quot;fa fa-download&quot;&gt;&lt;/i&gt; Download the results PDF&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;survey-details-and-results&quot;&gt;Survey details and results&lt;/h2&gt;

&lt;p&gt;Thank you each and everyone who participated, we value your time and input! Read further to see the results and learn more about the state of Scala in 2022.&lt;/p&gt;

&lt;h3 id=&quot;about-the-survey&quot;&gt;About the Survey&lt;/h3&gt;

&lt;p&gt;The survey was open between October 10th and October 21st 2022, and we received a total of 2236 responses. The format of the survey was as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;35 closed questions, non-mandatory&lt;/li&gt;
  &lt;li&gt;3 question formats:
    &lt;ul&gt;
      &lt;li&gt;Multiple choice to a prompt (often with &amp;gt;1 choice allowed)&lt;/li&gt;
      &lt;li&gt;Rating:
        &lt;ul&gt;
          &lt;li&gt;How often you use a Scala language feature or paradigm (0-5)&lt;/li&gt;
          &lt;li&gt;Familiarity and likelihood to try or reuse a tool/library&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This format was inspired by surveys in other language ecosystems, most notably the popular “State of JavaScript” survey. We chose this format for several reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Short: we wanted the participants to be able to answer as quickly as possible to each question, to get as many answers as possible.&lt;/li&gt;
  &lt;li&gt;Closed questions to allow our teams to quantify the answers.&lt;/li&gt;
  &lt;li&gt;Non-mandatory: If a question is not relevant, allow the respondent to skip, rather than receive low-quality responses.&lt;/li&gt;
  &lt;li&gt;Reusable year-over-year: in order to study the evolution of our ecosystem over the years, we used questions that are repeatable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are of course threats to the validity of our approach:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Only closed questions: since we did not propose any “Other” free-form edits, it is possible that we missed some high quality libraries or tools.&lt;/li&gt;
  &lt;li&gt;The binary choice between “would use again” and “would not use again” cannot express nuances, such as “will use again because I have no choice, but would rather not”.&lt;/li&gt;
  &lt;li&gt;Sample: we used as many distribution methods as we had at our disposal, but there is always a possibility that certain groups of users were under-represented.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;presenting-the-data&quot;&gt;Presenting the Data&lt;/h3&gt;

&lt;p&gt;In the following section, we present a selection of 5 from 35 questions that we found particularly interesting, with analysis. The rest of the result data can be found in the &lt;strong&gt;results PDF (see above)&lt;/strong&gt;. We have not processed any of the results before aggregation.&lt;/p&gt;

&lt;p&gt;The majority of respondents self-reported as being Scala developers (&lt;strong&gt;88.5%&lt;/strong&gt;). Out of all participants of the survey, &lt;strong&gt;40.8%&lt;/strong&gt; work primarily in projects with 10k to 100k lines of code and &lt;strong&gt;22.9%&lt;/strong&gt; work in companies with 101 to 1000 employees. The top 5 countries of respondents (representing &lt;strong&gt;50.1%&lt;/strong&gt; of the total) were the United States (&lt;strong&gt;19.1%&lt;/strong&gt;), the United Kingdom (&lt;strong&gt;8.9%&lt;/strong&gt;), Poland (&lt;strong&gt;8.1%&lt;/strong&gt;), Germany (&lt;strong&gt;7.7%&lt;/strong&gt;) and France (&lt;strong&gt;6.8%&lt;/strong&gt;).&lt;/p&gt;

&lt;h4 id=&quot;scala-versions-in-use&quot;&gt;Scala Versions in use&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/blog/survey-2022-results/major-versions-results.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We asked participants the question “&lt;em&gt;What major versions of Scala are you using?&lt;/em&gt;”, the results of which are in the above chart. It was answered by all 2236 participants. Please note that participants could give more than one answer.&lt;/p&gt;

&lt;p&gt;We can see from the given responses that &lt;strong&gt;79.9%&lt;/strong&gt; used “Scala 2.13”, this is an increase from &lt;a href=&quot;https://scalacenter.github.io/scala-developer-survey-2019/&quot;&gt;&lt;strong&gt;56%&lt;/strong&gt; in the 2019 survey&lt;/a&gt;. &lt;strong&gt;40.1%&lt;/strong&gt; used “Scala 3.x”, an increase from &lt;a href=&quot;https://scalacenter.github.io/scala-developer-survey-2019/&quot;&gt;&lt;strong&gt;6%&lt;/strong&gt; in the 2019 survey&lt;/a&gt;. &lt;strong&gt;34.8%&lt;/strong&gt; were using “Scala 2.12”, this is a decrease from &lt;a href=&quot;https://scalacenter.github.io/scala-developer-survey-2019/&quot;&gt;&lt;strong&gt;78%&lt;/strong&gt; in the 2019 survey&lt;/a&gt;. &lt;strong&gt;6.8%&lt;/strong&gt; were using “Scala 2.11”, this is a decrease from &lt;a href=&quot;https://scalacenter.github.io/scala-developer-survey-2019/&quot;&gt;&lt;strong&gt;33%&lt;/strong&gt; in the 2019 survey&lt;/a&gt;. &lt;strong&gt;1.1%&lt;/strong&gt; were using “Scala 2.10”, this is a decrease from &lt;a href=&quot;https://scalacenter.github.io/scala-developer-survey-2019/&quot;&gt;&lt;strong&gt;5%&lt;/strong&gt; in the 2019 survey&lt;/a&gt;. The “other” option received &lt;strong&gt;0.18%&lt;/strong&gt; of responses, these were answered by participants who report not using Scala at all.&lt;/p&gt;

&lt;p&gt;In appears that since 2019, the majority of respondents have switched from 2.12 to 2.13, and that Scala 2.11 usage has significantly decreased. However historically usage of old Scala versions has been hard to quantify due to the reach of of the survey and the places where these old Scala versions are often used.&lt;/p&gt;

&lt;p&gt;The drop in Scala 2.11 usage matches our expectations, as many community projects are publicly discussing whether support should be dropped, such as Scala.js and Scala Native.&lt;/p&gt;

&lt;p&gt;We can see that a large number of respondents (&lt;strong&gt;40%&lt;/strong&gt;) report using Scala 3.x. From this survey it is unclear if this is “in production” usage, or just personal testing, the question should be more precise next time. We can however identify confidence from the community in migrating to Scala 3 in production, e.g. &lt;a href=&quot;https://lichess.org/@/thibault/blog/lichess--scala-3/y1sbYzJX&quot;&gt;the recent Lichess migration&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;scala-platforms-in-use&quot;&gt;Scala Platforms in use&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/blog/survey-2022-results/platforms-results.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We asked respondents the question “&lt;em&gt;What platforms do you target?&lt;/em&gt;” seen in the above chart.
Again, respondents could pick more than one option. This was answered by 2234 out of 2236 participants.&lt;/p&gt;

&lt;p&gt;We see that &lt;strong&gt;99.7%&lt;/strong&gt; use “Scala on JVM”; &lt;strong&gt;17.6%&lt;/strong&gt; use “Scala.js”, an increase from &lt;a href=&quot;https://scalacenter.github.io/scala-developer-survey-2019/&quot;&gt;&lt;strong&gt;13%&lt;/strong&gt; in the 2019 survey&lt;/a&gt;; and &lt;strong&gt;6.9%&lt;/strong&gt; use “Scala Native”, an increase from &lt;a href=&quot;https://scalacenter.github.io/scala-developer-survey-2019/&quot;&gt;&lt;strong&gt;5.6%&lt;/strong&gt; in the 2019 survey&lt;/a&gt;. The “other” option received &lt;strong&gt;0.6%&lt;/strong&gt; of responses, some of the responders listed as follows, in no particular order:&lt;/p&gt;

&lt;p&gt;GraalVM Native Image, Cardano Plutus, Android.&lt;/p&gt;

&lt;p&gt;In general it appears that JVM usage remains stable, but that more participants are trying Scala.js and Scala Native. Again it is hard to know the common use cases associated with each platform, which could be useful to ask next time.&lt;/p&gt;

&lt;h4 id=&quot;aspects-of-scala-development-to-improve&quot;&gt;Aspects of Scala development to improve&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/blog/survey-2022-results/which-aspects-to-improve-results.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We asked participants “&lt;em&gt;Let’s say that you are given the power to choose which parts of the Scala ecosystem are being improved. Please select up to 3 of the following aspects of working with Scala, you would like to see improved&lt;/em&gt;”.
The results of which are presented above. 2189 out of 2236 (&lt;strong&gt;98%&lt;/strong&gt;) participants answered, and were allowed to select 3 options.&lt;/p&gt;

&lt;p&gt;The top 5 options selected were “compile/build speed” with &lt;strong&gt;57.1%&lt;/strong&gt; of responses; “tooling” with &lt;strong&gt;50.9%&lt;/strong&gt; of responses; “memory usage” with &lt;strong&gt;25.0%&lt;/strong&gt; of responses; “dependency management” with &lt;strong&gt;21.2%&lt;/strong&gt; of responses; and “Scala Native” with &lt;strong&gt;20.7%&lt;/strong&gt; of responses.&lt;/p&gt;

&lt;p&gt;We see respondents are also concerned about “CPU usage”, “educational materials”, “binary compatibility”, and having “more out of the box utilities (batteries included)”.&lt;/p&gt;

&lt;p&gt;Less concern is given to issues such as “Scala.js”. This is likely due to the relatively low adoption of the Scala.js platform. However, the  “Scala Native” option is significantly greater, despite having the lowest adoption as a platform. Perhaps this indicates that many Scala JVM users anticipate switching to Scala Native when the platform matures.&lt;/p&gt;

&lt;p&gt;Also of less concern were “Java interop”, “security” and “linters”: this could indicate that these are successful aspects, supported by high usage of Scala on JVM and in Web services. This could however also mean that build times, memory usage, etc. are that much more of a priority.&lt;/p&gt;

&lt;h4 id=&quot;domains-that-scala-is-used-in&quot;&gt;Domains that Scala is used in&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/blog/survey-2022-results/types-programs-results.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We asked respondents “&lt;em&gt;What types of programs do you use Scala most often for&lt;/em&gt;”, answered by 2208 out of 2236 (&lt;strong&gt;99%&lt;/strong&gt;) of respondents. More than one option could be selected.&lt;/p&gt;

&lt;p&gt;The top 6 options selected were “web/API/RPC services” with &lt;strong&gt;88.0%&lt;/strong&gt; of responses; “data processing” with &lt;strong&gt;59.2%&lt;/strong&gt; of responses, “libraries/frameworks” with &lt;strong&gt;50.1%&lt;/strong&gt; of responses; “CLI programs” with &lt;strong&gt;18.8%&lt;/strong&gt; of responses; “Automation/Scripting” with &lt;strong&gt;18.2%&lt;/strong&gt; of responses; and “web frontend” with &lt;strong&gt;13.4%&lt;/strong&gt; of responses.&lt;/p&gt;

&lt;p&gt;Under the field “other”, receiving &lt;strong&gt;1.9%&lt;/strong&gt; of responses, some of the responders listed as follows, in no particular order:  Blockchain, backend, compiler, mathematical optimisation.&lt;/p&gt;

&lt;h4 id=&quot;learning-resources-for-scala&quot;&gt;Learning resources for Scala&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/blog/survey-2022-results/resources-learn-scala-results.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We asked respondents “&lt;em&gt;Which types of resources did you use to learn Scala?&lt;/em&gt;”, answered by 2206 out of 2236 (&lt;strong&gt;99%&lt;/strong&gt;) of participants. Again this question allowed multiple options to be selected.&lt;/p&gt;

&lt;p&gt;We see that &lt;strong&gt;78.1%&lt;/strong&gt; of respondents chose “books”; &lt;strong&gt;77.5%&lt;/strong&gt; chose the &lt;a href=&quot;https://docs.scala-lang.org&quot;&gt;official documentation&lt;/a&gt;; &lt;strong&gt;77.21%&lt;/strong&gt; chose “online courses”; &lt;strong&gt;8.43%&lt;/strong&gt; chose “university courses”; &lt;strong&gt;3.72%&lt;/strong&gt; chose “bootcamps”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;16.7%&lt;/strong&gt; of respondents chose “other” which is significantly more compared to the rest of the  questions in the survey with the same field. Here’s what came up, in no particular order:
Work experience, hackathons, local user groups, youtube tutorials, internal company training, blogs, Stackoverflow, and more.&lt;/p&gt;

&lt;p&gt;Going forward it would be useful to reinclude some of the “other” options in the main questions, and further determine which books/docs/courses were useful.&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Advent of Code 2022</title>
    <link href="https://www.scala-lang.org/blog/2022/12/12/advent-of-code.html"/>
    <updated>2022-12-12T00:00:00+01:00</updated>
    <id>https://www.scala-lang.org/blog/2022/12/12/advent-of-code</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt; is a yearly event that consists of a series of small programming puzzles. The puzzles are released daily from December 1st to December 25th. The goal is to improve your understanding of your programming language of choice by solving as many puzzles as possible.&lt;/p&gt;

&lt;p&gt;Last year, Scala Center started the tradition of participating in the challenge. This year, we are continuing this tradition, and also we are inviting you to join us!&lt;/p&gt;

&lt;p&gt;We have created a new section for the 2022 Advent of Code on the &lt;a href=&quot;https://scalacenter.github.io/scala-advent-of-code/2022/&quot;&gt;Scala Center Advent of Code website&lt;/a&gt;. There you can find the solutions to the puzzles, and also submit yours to be featured there.&lt;/p&gt;

&lt;p&gt;If you would like to submit a solution to a puzzle, you can click “Edit this page” on the puzzle page, and then create a pull request with the link to your solution under the “Solutions from the community” section.&lt;/p&gt;

&lt;p&gt;It is more fun to solve the puzzles together! So we have created a &lt;a href=&quot;https://discord.com/channels/632150470000902164/913451015246868530&quot;&gt;Discord channel&lt;/a&gt; at the official &lt;a href=&quot;https://discord.com/invite/scala&quot;&gt;Scala Discord Server&lt;/a&gt;. There you can discuss the puzzles, share your solutions, and ask for help.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Google Summer of Code 2022: How It Was</title>
    <link href="https://www.scala-lang.org/blog/2022/11/15/gsoc-report.html"/>
    <updated>2022-11-15T00:00:00+01:00</updated>
    <id>https://www.scala-lang.org/blog/2022/11/15/gsoc-report</id>
    <content type="html">&lt;p&gt;We’ve recently completed another successful Google Summer of Code program. Designed to bring more beginners into programming communities, the participation in the program is a part of Scala Center’s strategy to make contributing to the Scala language more newcomer-friendly.&lt;/p&gt;

&lt;p&gt;This year, we welcomed four students guided by five mentors. They contributed to projects such as Scala Native, Creative Scala, Scalafix, and Metals. In this article, you can find a short summary of what was done as well as the links to find out more.&lt;/p&gt;

&lt;h2 id=&quot;scala-native-linker-optimization&quot;&gt;Scala Native: Linker Optimization&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://scala-native.org/&quot;&gt;Scala Native&lt;/a&gt; is an optimizing ahead-of-time compiler and runtime for Scala. It enables the programmer to compile Scala to native code that does not require a JVM for its execution. Scala Native is great for performance-critical applications – think embedded software – that require tight memory control while allowing all the type-safety and compile-time verification advantages that come with Scala.&lt;/p&gt;

&lt;p&gt;During GSoC 2022, Liangyong Yu, mentored by Wojciech Mazur, was working on making Scala Native faster and more memory-efficient. He introduced incremental compilation that reduced the build time by 21% on average. Also, he developed a benchmarking infrastructure to measure the performance of Scala Native builds. Considerable work was done on the optimizer of Scala Native which resulted in decreased memory consumption.&lt;/p&gt;

&lt;p&gt;Overall, Liangyong’s work makes Scala Native builds even more performant time- and memory-wise, which will be especially interesting for the developers of large codebases. You can find out more in Liangyong’s &lt;a href=&quot;https://github.com/yuly16/Scala-Native-GSoC-Report&quot;&gt;report&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;doodle-explore&quot;&gt;Doodle Explore&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/creativescala/doodle&quot;&gt;Scala Doodle&lt;/a&gt; is a compositional graphics library for generative art in Scala that enables users to declaratively create art pieces and other visualizations. A Doodle graphic is generally parameterized by one or more variables such as stroke width and background color, or sometimes something more domain-specific like the magnitude of gravity or iterations of a fractal. In any of these cases, the creator of a graphic may want to use a GUI for changing the parameters to fine-tune the art piece or provide a means to make the graphic interactive.&lt;/p&gt;

&lt;p&gt;Mikail Khan, mentored by Noel Welsh, developed a domain-specific language for describing GUIs during the Summer of 2022 – have a look at this &lt;a href=&quot;https://creativescala.github.io/doodle-explore/&quot;&gt;documentation microsite&lt;/a&gt; for a quick demo.&lt;/p&gt;

&lt;p&gt;The project will be especially interesting for Scala educators. For experienced and novice programmers alike, it’s important to quickly get feedback on what your code is doing – this is how we learn. Even more so it is important for people who have just started their journey in programming. Having a visual feedback you can play with is a great feature that can be used to teach Scala to newcomers.&lt;/p&gt;

&lt;p&gt;The final report for this project is available &lt;a href=&quot;https://static.mikail-khan.com/gsoc-report/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;towards-scala-3-support-for-scalafix-explicitresulttypes-cross-compiling-to-scala-3&quot;&gt;Towards Scala 3 support for Scalafix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExplicitResultTypes&lt;/code&gt;: cross-compiling to Scala 3&lt;/h2&gt;
&lt;p&gt;Scalafix is a linting and rewriting tool for Scala codebases. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExplicitResultTypes&lt;/code&gt; is one of the built-in rules, which inserts type annotations for inferred public members.&lt;/p&gt;

&lt;p&gt;Unlike most rules that only rely on the Scalafix &amp;amp; SemanticDB APIs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExplicitResultTypes&lt;/code&gt; also depends on the Scala presentation compiler, requiring users to run Scalafix with the Scala binary version targeted by the source files they want to annotate. As Scalafix is currently only cross-compiled to Scala 2.11, 2.12 and 2.13, it is not trivial to interact with the Scala 3 compiler and thus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExplicitResultTypes&lt;/code&gt; cannot run on Scala 3 source files at the moment.&lt;/p&gt;

&lt;p&gt;Razvan Vacaru, mentored by Brice Jaglin and Meriam Lachkar made a significant progress towards the goal of supporting Scala 3 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExplicitResultTypes&lt;/code&gt; by cross-compiling all Scalafix modules to Scala 3. You can find a detailed report &lt;a href=&quot;https://github.com/rvacaru/GsoC-2022-Scalafix&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;semantic-highlighting-in-metals&quot;&gt;Semantic Highlighting in Metals&lt;/h2&gt;
&lt;p&gt;Semantic Highlighting is a part of the default LSP (Language Server Protocol – what connects Metals to your favorite code editor to bring all nice developer experience to you) spec, but it is not yet supported by Metals. This would allow the highlighting of tokens (keywords etc.) based on semantic information about the code. This is especially useful with things like soft keywords in Scala 3, but not only.&lt;/p&gt;

&lt;p&gt;Semantic Highlighting is a long-standing &lt;a href=&quot;https://github.com/scalameta/metals-feature-requests/issues/57&quot;&gt;feature request&lt;/a&gt; in Metals. Having a finer-grained, smarter code highlighting would enhance the developer experience, making Scala even more pleasant to work with across all the different editors.&lt;/p&gt;

&lt;p&gt;Shintaro Sasaki, mentored by Tomasz Godzik, has been working on the project during the Summer of 2022. Currently, the project is still a work-in-progress – you can follow its development at the following &lt;a href=&quot;https://github.com/scalameta/metals/pull/4444&quot;&gt;PR&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The work done during GSoC 2022 makes Scala even more performant in certain areas, brings even more options for Scala educators to teach Scala, and enhances the Scala migration and development experience.&lt;/p&gt;

&lt;p&gt;The Scala community has gained four more contributors as a result of the program. We would like to thank the students whom we mentored this year – Liangyong Yu, Mikail Khan, Razvan Vacaru, Shintaro Sasaki – for their contribution to keeping Scala awesome.&lt;/p&gt;

&lt;p&gt;We would also like to thank the mentors – Brice Jaglin, Meriam Lachkar, Noel Welsh, Tomasz Godzik, Wojciech Mazur – for the time and knowledge they invested in getting the students up to speed with the projects and the community.&lt;/p&gt;

&lt;p&gt;Scala Center is intended to participate in GSoC 2023 as well! If you are interested in joining, either as a mentor or a student – keep an eye on our LinkedIn and Twitter for updates on the future installment of GSoC. You can also consult the &lt;a href=&quot;https://developers.google.com/open-source/gsoc/timeline&quot;&gt;timeline&lt;/a&gt; for 2022 to have some idea on the timeframes of the previous installment and have some idea on when to expect things to come into motion in 2023.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scala 3.2.1 released!</title>
    <link href="https://www.scala-lang.org/blog/2022/11/07/scala-3.2.1-released.html"/>
    <updated>2022-11-07T00:00:00+01:00</updated>
    <id>https://www.scala-lang.org/blog/2022/11/07/scala-3.2.1-released</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/lampepfl/dotty/releases/tag/3.2.1&quot;&gt;Scala 3.2.1&lt;/a&gt; is now available!&lt;/p&gt;

&lt;p&gt;This version is a bug-fixing release focusing mainly but not exclusively on solving rare issues with code not compiling after upgrading the language version to 3.2.0. This release also brings two notable enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can use published versions of the compiler to experiment with &lt;a href=&quot;https://docs.scala-lang.org/scala3/reference/experimental/cc.html&quot;&gt;capture checking&lt;/a&gt;. You are no longer required to build the compiler from the sources from the experimental branch. Note that the capture-checking feature is still in an early experimental stage and needs lots of work and time before it becomes stable.&lt;/li&gt;
  &lt;li&gt;It includes the first batch of frontend changes to generated Scaladoc. You can see the overall direction of changes and some future improvements by visiting the documentation site for &lt;a href=&quot;https://www.scala-lang.org/api/3.2.1/&quot;&gt;the standard library&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Thank you to all the contributors who made the release of 3.2.1 possible 🎉&lt;/p&gt;

&lt;p&gt;According to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git shortlog -sn --no-merges 3.2.0..3.2.1&lt;/code&gt;, they are:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   215 Martin Odersky
    94 Filip Łukasik
    69 Fengyun Liu
    57 Filip Zybała
    31 Dale Wijnand
    16 Paweł Marks
    14 Sébastien Doeraene
    10 Guillaume Raffin
     9 rochala
     8 Chris Kipp
     8 Som Snytt
     7 Jędrzej Rochala
     7 Nicolas Stucki
     7 Yichen Xu
     6 Jamie Thompson
     6 Tom Grigg
     5 Kacper Korban
     5 noti0na1
     2 Arman Bilge
     2 Matt Bovel
     2 Ondrej Lhotak
     2 Quentin Bernet
     2 Seth Tisue
     2 Tomasz Godzik
     1 Adrien Piquerez
     1 Florian3k
     1 Gagandeep Kalra
     1 Jentsch
     1 Kieren Davies
     1 Michał Pałka
     1 Naveen
     1 Oron Port
     1 Rubin Simons
     1 Wojciech Mazur
     1 esteban marin
     1 naveen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>The Scala 3 Compiler Academy moves to Discord</title>
    <link href="https://www.scala-lang.org/blog/2022/11/02/compiler-academy.html"/>
    <updated>2022-11-02T00:00:00+01:00</updated>
    <id>https://www.scala-lang.org/blog/2022/11/02/compiler-academy</id>
    <content type="html">&lt;p&gt;Scala is one of the few programming languages that was born in academia and proceeded to become an industry standard. Scala stands for “Scalable Language”, and with its scaling to industry, the workload on the core team also scales. In the academic environment, research is the primary focus, not language maintenance. So, to cope with the emerging challenges of scale, new solutions must be explored.&lt;/p&gt;

&lt;h2 id=&quot;the-scala-3-compiler-academy&quot;&gt;The Scala 3 Compiler Academy&lt;/h2&gt;

&lt;p&gt;One such solution is the Scala 3 Compiler Academy. In Summer 2021, the Scala team at EPFL conducted the first iteration of the Scala 3 Compiler Issue Spree. The online pair programming event featured small teams of 2-3 people working together in Zoom breakout rooms to fix various Scala 3 bugs and learn the art of the compiler one from another. The aim of the event was to foster knowledge transfer between the compiler maintainers.&lt;/p&gt;

&lt;p&gt;A lot changed over the past year. We’ve successfully conducted over 20 iterations of the Spree, gradually opened it to motivated learners from outside our core teams, polished our workflows, and started a &lt;a href=&quot;https://www.youtube.com/channel/UCIH0OgqE54-KEvYDg4LRhKQ&quot;&gt;YouTube channel&lt;/a&gt; where we regularly post educational videos about how the compiler works.&lt;/p&gt;

&lt;h2 id=&quot;moving-to-discord&quot;&gt;Moving to Discord&lt;/h2&gt;

&lt;p&gt;The Compiler Academy started to gain more presence in the community, and more people became interested in joining. Today, we are taking a logical step towards growing this community of compiler enthusiasts even further. We’re moving all the organization and communication around the Compiler Academy to the &lt;a href=&quot;https://discord.com/invite/scala&quot;&gt;Scala Discord server&lt;/a&gt;. Now, you can follow the Spree at the #scala-contributors channel of that Discord, where all the Spree announcements will be regularly posted.&lt;/p&gt;

&lt;p&gt;If you’re a lifelong learner passionate about all things programming, you may have wondered what happens when your favorite language compiles your code. Maybe you have aspirations to contribute your ideas and solutions to the compiler one day. Or maybe you’re eager to understand how a modern cutting-edge compiler works because you’d like to develop a programming language of your own.&lt;/p&gt;

&lt;p&gt;The Scala 3 Compiler Academy is your chance to become a part of a community of like-minded people and learn the compiler together!&lt;/p&gt;

&lt;h2 id=&quot;rules-of-participation&quot;&gt;Rules of Participation&lt;/h2&gt;

&lt;p&gt;The Spree is organized by the Scala Center. We are committed to keeping the Spree community professional and friendly, so before you can join any of the Sprees, you will need to complete the one-time onboarding process including an interview with a Scala Center representative.&lt;/p&gt;

&lt;p&gt;While participating in the official Scala spaces, including the official Discord server and the Compiler Academy community, you are required to follow the &lt;a href=&quot;https://www.scala-lang.org/conduct/&quot;&gt;Code of Conduct&lt;/a&gt;. The Scala Center reserves the right to refuse your participation in the Compiler Academy at any point at its sole discretion.&lt;/p&gt;

&lt;h2 id=&quot;logistics&quot;&gt;Logistics&lt;/h2&gt;

&lt;p&gt;The Scala 3 Compiler Academy Issue Spree is an online event that takes place every 3 weeks, on Tuesdays at 17:00-19:00 CE(S)T. Before your first Spree, you will meet with a Scala Center representative for a short onboarding interview. After that, you will be able to register for each event separately, possibly specifying your preferences about the issue you’ll be working on. You then will be assigned to a team of 2-3 people, and during the Spree, you’ll be working on the same issue (not necessarily the one you specified in your registration) in a Zoom breakout room.&lt;/p&gt;

&lt;p&gt;To register for participation and schedule an onboarding call, fill in the following &lt;a href=&quot;https://airtable.com/shr01mNvkz4oEZH38&quot;&gt;form&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following resources can be useful to get started:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/scala3/guides/contribution/procedures-intro.html&quot;&gt;Compiler Contribution guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCIH0OgqE54-KEvYDg4LRhKQ&quot;&gt;Compiler Academy YouTube Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We strongly recommend taking a look at those guides before the Spree you’re participating in. The issue you were assigned should have helpful material as well.&lt;/p&gt;

&lt;p&gt;At all times, you can ask compiler-related questions on the #scala-contributors channel of the &lt;a href=&quot;https://discord.com/invite/scala&quot;&gt;Scala Discord&lt;/a&gt;. You can also use Discord direct messaging to keep in touch with teammates.&lt;/p&gt;

&lt;p&gt;We are looking forward to working with you during the Sprees!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Participate in the Scala Survey 2022!</title>
    <link href="https://www.scala-lang.org/blog/2022/09/29/scala-survey-2022-announcement.html"/>
    <updated>2022-09-29T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2022/09/29/scala-survey-2022-announcement</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;/resources/img/scala-survey-2022-announcement.png&quot; alt=&quot;Scala Survey 2022 Announcement&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-scala-team-wants-to-hear-from-you&quot;&gt;The Scala Team wants to hear from you!&lt;/h2&gt;

&lt;p&gt;We want to make the language we all love as amazing as possible. We want to know which way the Scala community is moving and which parts of the Scala language you utilize the most. That’s why we invite you to help by participating in the Scala Survey 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://scala-survey-2022.virtuslab.com/&quot;&gt;Scala Survey 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Survey will close on &lt;strong&gt;21.10.2022&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about-the-survey&quot;&gt;About the survey&lt;/h2&gt;

&lt;p&gt;Completing the survey should take 4-12 minutes, and is anonymous.&lt;/p&gt;

&lt;p&gt;Your responses will help us understand Scala’s strengths and weaknesses. They will also help in guiding the development priorities for the Scala team.&lt;/p&gt;

&lt;p&gt;We are interested in learning what libraries and tools people are using, what platforms they support, the future direction of tooling focus, where people are learning to use scala/training engineers, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who is the survey intended for?&lt;/strong&gt; Everyone. Whether you’re an experienced Scala Developer or just starting your Scala journey, we count on your participation.&lt;/p&gt;

&lt;p&gt;After the survey closes, we will publish the aggregated results on the &lt;a href=&quot;https://www.scala-lang.org/blog/&quot;&gt;Scala blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-else-can-i-do-to-help&quot;&gt;What else can I do to help?&lt;/h2&gt;

&lt;p&gt;Spread the word! Help us get answers from as many diverse groups as possible. So share the survey on social media, in your office, at your university, at meetups, and in other communities.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scala 3.2.0 released!</title>
    <link href="https://www.scala-lang.org/blog/2022/09/05/scala-3.2.0-released.html"/>
    <updated>2022-09-05T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2022/09/05/scala-3.2.0-released</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;/resources/img/scala-3.2-launch.png&quot; alt=&quot;Scala 3.2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are happy to announce the release of Scala 3.2.0. This new minor release allowed us to deliver some significant improvements.&lt;/p&gt;

&lt;h2 id=&quot;whats-new-in-scala-320&quot;&gt;What’s new in Scala 3.2.0&lt;/h2&gt;

&lt;h3 id=&quot;support-for-code-coverage&quot;&gt;Support for code coverage&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scoverage/scalac-scoverage-plugin&quot;&gt;Scoverage&lt;/a&gt; is an excellent tool for keeping track of the test coverage of code written in Scala. Unfortunately, it relied on a compiler plugin to generate coverage data. This means that it was limited only to Scala 2 code. Now we have changed that. Since the launch of 3.2, the Scala compiler can natively generate coverage data. To enable that, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-coverage-out&lt;/code&gt; flag and provide the output directory. The Scoverage plugin for sbt is even more convenient. It sets up the compiler flags, includes other parts of the Scoverage toolset, and automatically generates human-readable reports.&lt;/p&gt;

&lt;h3 id=&quot;exports-in-extension-clauses&quot;&gt;Exports in extension clauses&lt;/h3&gt;

&lt;p&gt;We have added Extension clauses to the list of places where users can export definitions. That allows, among other benefits, to add extensions method in bulk without relying on any form of implicit conversion. Let’s examine the simple example:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RichInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;triple&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;richInt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RichInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;richInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triple&lt;/code&gt; methods as extensions to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt; type, so calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.double&lt;/code&gt; will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this example, there is no benefit in exporting the methods instead of declaring them as extensions. However, in real life, the equivalent of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RichInt&lt;/code&gt; class can be generic, rely on inheritance, declare its own exports from other types or be used in multiple extension clauses. This allows for much better reuse and modularity of extensions, which was not possible before.&lt;/p&gt;

&lt;h3 id=&quot;code-completion-for-refined-types&quot;&gt;Code completion for refined types&lt;/h3&gt;

&lt;p&gt;Scala 3.0 introduced a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selectable&lt;/code&gt; marker trait for types that support the dynamic selection of members. It allows bridging the outside world of untyped data (such as JSON) with strongly typed Scala code. In 3.2, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selectable&lt;/code&gt; trait gained a huge boost as the compiler now generates code completion data for it based on type refinements. Metals and Scala REPL are already using said data and are providing code completion for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selectable&lt;/code&gt;’s members.&lt;/p&gt;

&lt;p&gt;Let’s assume that in our code, we have some simple implementation of JSON data and the type for JSON representing a person. It may look something like this:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Selectable&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// provide the implementation for parsing here&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we have an instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; type named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;person&lt;/code&gt; and then type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;person.a&lt;/code&gt; in our IDE or REPL, the auto-completion will provide suggestions for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;address&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;age&lt;/code&gt; fields.&lt;/p&gt;

&lt;p&gt;If you are interested in how you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selectable&lt;/code&gt; and refined types for safer work with untyped data in your code, you may want to take a look at this example: &lt;a href=&quot;https://github.com/VirtusLab/iskra&quot;&gt;Iskra&lt;/a&gt;. This simple library provides better type safety and auto-completion when working with Apache Spark’s data frames.&lt;/p&gt;

&lt;h3 id=&quot;improved-mirror-synthesis&quot;&gt;Improved Mirror synthesis&lt;/h3&gt;

&lt;p&gt;Mirrors are an important innovation in Scala 3. They are the given instances of type class generated by the compiler for selected types and, most importantly, all case classes and enums. They allow for defining type class derivation without using advanced metaprogramming techniques.&lt;/p&gt;

&lt;p&gt;In 3.2, a lot of work was put into improving the Mirror synthesis. Most importantly, Mirrors are now generated for local and inner classes and generic tuples up to the size of 22. Also, there are substantial improvements in reporting Mirror-related errors. Now, the compiler prints a list of reasons why it couldn’t generate the requested Mirror.&lt;/p&gt;

&lt;h3 id=&quot;easier-use-of-class-constructors-with-using-clauses&quot;&gt;Easier use of class constructors with using clauses&lt;/h3&gt;

&lt;p&gt;Until now, classes using clauses sometimes required passing awkward empty parameter lists to the constructor.  For example, the following snippet:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;something&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;was failing with a misleading error message. The only proper way to instantiate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Example&lt;/code&gt; class was inserting an unintuitive empty parameter list and writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Example()(6)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the compiler correctly inserts parameter lists, so this snippet compiles as expected.&lt;/p&gt;

&lt;h3 id=&quot;given-instances-in-for-comprehension&quot;&gt;Given instances in for-comprehension&lt;/h3&gt;

&lt;p&gt;It is now possible to declare bindings in for-comprehensions as given instances that are visible in the for-comprehension scope.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;usesString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ints&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;def&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xyz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this now works&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usesString&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;statistics-about-code-complexity&quot;&gt;Statistics about code complexity&lt;/h3&gt;

&lt;p&gt;The new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Vprofile&lt;/code&gt; compiler flags give some insights into code complexity and where compilation time is likely spent. If set, the compiler prints a summary for every compiled source file. The summary contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the source file name,&lt;/li&gt;
  &lt;li&gt;the number of code lines in the source, excluding comments and whitespace,&lt;/li&gt;
  &lt;li&gt;the number of tokens (separately parsed words) in the source,&lt;/li&gt;
  &lt;li&gt;the number of TASTy chunks produced from the source. A chunk consists of 50 bytes of Tasty output that serializes the type-checked tree coming from the source, using some compression techniques. The size of the generated Tasty is a good estimator of compile times and code complexity.&lt;/li&gt;
  &lt;li&gt;the average complexity per line, computed by dividing the number of lines by the number of Tasty chunks.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;an explanation of the average complexity number, computed as follows:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;low: fewer Tasty chunks than source lines,&lt;/li&gt;
      &lt;li&gt;moderate: up to 5 times more TASTy chunks than source lines,&lt;/li&gt;
      &lt;li&gt;high: up to 25 times more TASTy chunks than source lines,&lt;/li&gt;
      &lt;li&gt;extreme: At least 25 times more TASTy chunks than source lines,&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the directory where the source is located.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two additional related flags:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Vprofile-sorted-by:&amp;lt;column label&amp;gt;&lt;/code&gt; prints the same output as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Vprofile&lt;/code&gt;, but it is sorted according to a specified column, for example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complexity&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lines&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Vprofile-details &amp;lt;number&amp;gt;&lt;/code&gt; summarizes the profiles of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;number&amp;gt;&lt;/code&gt; most complex methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Vprofile&lt;/code&gt; option family is useful for trouble-spotting long compile times.&lt;/p&gt;

&lt;h3 id=&quot;new-experimental-apis&quot;&gt;New experimental APIs&lt;/h3&gt;

&lt;p&gt;The following new APIs were introduced to the language and currently can be used in experimental code. We are looking forward to user feedback before we decide to stabilise them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/annotation/MainAnnotation.html#&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.annotation.MainAnnotation&lt;/code&gt;&lt;/a&gt; - the annotation that can be used to define custom entry points to the application&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/annotation/newMain.html#&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.annotation.newMain&lt;/code&gt;&lt;/a&gt; - new implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@main&lt;/code&gt; annotation. It is planned to replace it in the future&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/util/TupledFunction.html#&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.util.TupledFunction&lt;/code&gt;&lt;/a&gt; - the typeclass allowing to abstract over function arities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stabilised-apis&quot;&gt;Stabilised APIs&lt;/h2&gt;

&lt;p&gt;The 3.2 release stabilises a bunch of APIs that previously could be used only in experimental code. Those are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/deriving/Mirror$.html#fromTuple-fffffb85&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.deriving.Mirror.fromTuple&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/Tuple.html#:*-a82&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.Tuple.:*&lt;/code&gt;&lt;/a&gt; together with &lt;a href=&quot;https://scala-lang.org/api/3.x/scala/Tuple$.html#Append-0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.Tuple.Append&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/NonEmptyTuple.html#init-ffffff96&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.NonEmptyTuple.init&lt;/code&gt;&lt;/a&gt; together with &lt;a href=&quot;https://scala-lang.org/api/3.x/scala/Tuple$.html#Init-0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.Tuple.Init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/NonEmptyTuple.html#last-fffff7c4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.NonEmptyTuple.last&lt;/code&gt;&lt;/a&gt; together with &lt;a href=&quot;https://scala-lang.org/api/3.x/scala/Tuple$.html#Last-0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.Tuple.Last&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/quoted/Quotes$reflectModule$AppliedTypeModule.html#apply-fffffbf2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.quoted.Quotes.reflectModule.AppliedTypeModule.apply&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/quoted/Quotes$reflectModule$SymbolMethods.html#asQuotes-fffffdc2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.quoted.Quotes.reflectModule.SymbolMethods.asQuotes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/quoted/Quotes$reflectModule$SymbolMethods.html#termRef-d26&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.quoted.Quotes.reflectModule.SymbolMethods.termRef&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/quoted/Quotes$reflectModule$SymbolMethods.html#typeRef-d26&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.quoted.Quotes.reflectModule.SymbolMethods.typeRef&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/quoted/Quotes$reflectModule$TypeReprMethods.html#substituteTypes-3a6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.quoted.Quotes.reflectModule.TypeReprMethods.substituteTypes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/quoted/Quotes$reflectModule$TypeReprMethods.html#typeArgs-5f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.quoted.Quotes.reflectModule.TypeReprMethods.typeArgs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/quoted/Quotes$reflectModule$TypeTreeModule.html#ref-d26&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.quoted.Quotes.reflectModule.TypeTreeModule.ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/Predef$.html#eq-fffff7fa&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.Predef.eq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scala-lang.org/api/3.x/scala/Predef$.html#ne-fffff7fa&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.Predef.ne&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;should-i-update-to-scala-320&quot;&gt;Should I update to Scala 3.2.0?&lt;/h2&gt;

&lt;p&gt;We thoroughly tested all release candidates for 3.2.0 to detect any source incompatibilities. We run a so-called Open Community Build, a compilation of nearly 1000 real-life projects on each compiler build. You can read how we achieved this ambitious goal in &lt;a href=&quot;https://virtuslab.com/blog/prevent-scala3-compiler-regressions-community-build/&quot;&gt;the recent blog post&lt;/a&gt; of our teammate. Thanks to the knowledge we have gathered using Open Community Build, we have managed to ensure that over 98% of projects passing compilation with 3.1.3 are still compiling correctly without any changes to the source code.&lt;/p&gt;

&lt;p&gt;In most cases, fixing an error that resulted from source-incompatible change does not require many fundamental steps for the project author. Typically, it requires explicitly specifying the type in a place where the code previously relied on type inference. If somehow you encounter source incompatibility that cannot be easily fixed, let us know, and we will try to fix that in upcoming patch releases of the 3.2 compiler.&lt;/p&gt;

&lt;p&gt;The more important question than “Should I update to Scala 3.2.0?” is “When should I update to Scala 3.2.0?”. The answer for standalone projects and applications is “The sooner, the better”. The update most likely won’t require any additional work, and you will be able to enjoy all the improvements brought by the current version.&lt;/p&gt;

&lt;p&gt;If you are a library author, you also need to consider that bumping the compiler version in your library will also force all downstream users to use the new compiler the next time they bump the version of your library. For this reason, we encourage you that if you are following the semantic versioning, you bump the compiler version in the next minor release of your library.&lt;/p&gt;

&lt;p&gt;You can read more about our compatibility guarantees and future plans regarding this aspect in &lt;a href=&quot;/blog/2022/08/17/long-term-compatibility-plans.html&quot;&gt;the previous blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;known-incompatibilities&quot;&gt;Known incompatibilities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The code that used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; to signal that the class constructor should use given instances from the scope as using parameters is no longer compiling.&lt;/p&gt;

    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bar(&quot;&quot;)&lt;/code&gt; instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.scala-lang.org/scala3/reference/dropped-features/nonlocal-returns.html&quot;&gt;Nonlocal returns&lt;/a&gt; from nested anonymous functions now produce a warning. They will be hard errors at some point in the future.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Refutable pattern bindings now produce a warning.&lt;/p&gt;

    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Will emit warning&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;To suppress the warning, you can annotate the right side with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@unchecked&lt;/code&gt; annotation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mirrors for top-level union types are no longer generated.&lt;/p&gt;

    &lt;p&gt;Up to 3.1.3, the compiler tried to generate Mirrors for some union types. Even when it succeeded, the result was often incorrect. Now the Mirrors are never generated for any union types.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Thank you to all the contributors who made the release of 3.2.0 possible 🎉&lt;/p&gt;

&lt;p&gt;According to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git shortlog -sn --no-merges 3.1.3..3.2.0&lt;/code&gt;, they are:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   154 odersky
    62 Nicolas Stucki
    51 Filip Zybała
    42 Jamie Thompson
    39 Dale Wijnand
    30 Tom Grigg
    29 Paweł Marks
    29 rochala
    25 Guillaume Raffin
    13 Fengyun Liu
    13 Ondrej Lhotak
    11 Guillaume Martres
    11 Sébastien Doeraene
     7 Matt Bovel
     7 Som Snytt
     6 Szymon Rodziewicz
     5 Julien Richard-Foy
     5 Martin Odersky
     5 Wojciech Mazur
     4 Chris Kipp
     4 Olivier Blanvillain
     4 Xavientois
     3 Rikito Taniguchi
     3 Vadim Chelyshov
     2 Adrien Piquerez
     2 Albert Chen
     2 Anatolii Kmetiuk
     2 Arnout Engelen
     2 Jan Chyb
     2 Lan, Jian
     2 Phil
     2 Philippus
     2 Raphael Jolly
     2 Robert Stoll
     2 Tim Spence
     2 cgccuser
     2 gagandeepkalra
     2 manojo
     2 noti0na1
     2 Артём
     1 Aleksander Boruch-Gruszecki
     1 Dmitrii Naumenko
     1 Humberto Rodríguez A
     1 Johannes Rudolph
     1 Jędrzej Rochala
     1 Krzysztof Romanowski
     1 Magnolia.K
     1 Michał Pałka
     1 Ondřej Lhoták
     1 Stéphane Micheloud
     1 Timothée Loyck Andres
     1 Yichen Xu
     1 adampauls
     1 johannes karoff
     1 ouertani
     1 xuwei-k
     1 yoshinorin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>Long-term compatibility plans for Scala 3</title>
    <link href="https://www.scala-lang.org/blog/2022/08/17/long-term-compatibility-plans.html"/>
    <updated>2022-08-17T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2022/08/17/long-term-compatibility-plans</id>
    <content type="html">&lt;h2 id=&quot;key-takeaways&quot;&gt;Key takeaways&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The Scala 3 version that you are using to compile your code should be treated the same way as any library dependency in your project. You shouldn’t be afraid of updating it. Bumping the patch version (e.g. 3.1.2 -&amp;gt; 3.1.3) is a no-brainer. Bumping the minor version (e.g. 3.1.3 -&amp;gt; 3.2.0) requires the same considerations as changing the minor version of any other dependency, yet is generally advisable.&lt;/li&gt;
  &lt;li&gt;You should not cross-compile between Scala 3 versions.&lt;/li&gt;
  &lt;li&gt;If you are maintaining a library, you should drop Scala 3.0. Also, you should upgrade to Scala 3.2 in your next minor release.&lt;/li&gt;
  &lt;li&gt;We are testing that the code that compiles with previous versions of the compiler will still compile in future releases, unless the fact that the code was compiling was a bug in the compiler. We are using hundreds of real-life projects to test that.&lt;/li&gt;
  &lt;li&gt;After evaluation, we have dropped the experimental &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-scala-output-version&lt;/code&gt; flag, as it turned out to be too hard to maintain and potentially harmful to the ecosystem.&lt;/li&gt;
  &lt;li&gt;Soon, we will start releasing Long-Term Support versions of the compiler for the users that require enhanced stability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;about-compatibility&quot;&gt;About compatibility&lt;/h2&gt;

&lt;p&gt;Compilers, as all software really, are constantly evolving. Since the initial release of Scala 3, there have been seven stable versions of the compiler. Each has brought performance and stability enhancements, fixed bugs, improved reporting or introduced some new experimental features to the language. Nevertheless, we still treat all those versions as an implementation of the same language. What allows us to think in such a way is the compatibility guarantees.&lt;/p&gt;

&lt;p&gt;The term &lt;em&gt;compatibility&lt;/em&gt; is often used quite vaguely. In the Scala world, the first intuition for this term could be phrased as follows: a new version of Scala is compatible with a previous version of Scala if a program that used to work with the earlier version still works with the latest version. Let us examine the term &lt;em&gt;compatibility&lt;/em&gt; closer right now. For Scala 3 compiler, &lt;em&gt;compatibility&lt;/em&gt; involves two concepts: source and output compatibility.&lt;/p&gt;

&lt;p&gt;We say that two compiler versions are source compatible if every single project that can be compiled with one version can also be compiled with the other, and the resulting programs behave the same way. We put a lot of effort into ensuring that source compatibility is preserved between patch releases, and that every infringement between minor versions is easy to fix. To enforce that, we are running builds of hundreds of open-source Scala 3 projects every night. Moreover, after every release candidate, we are testing the compiler on practically all open-source projects that were ever published for Scala 3.&lt;/p&gt;

&lt;p&gt;In addition, breaking source compatibility is usually not a big deal, as it can easily be detected at compile-time. In the past, fixing those problems have usually been limited to specifying explicit types in some places where the programmer relied on type inference. If your project is affected by a source-incompatible change, you often need to make only small adjustments. In the worst-case scenario, you will be locked on one version of the compiler for some time. That, however, will not affect projects depending on your code.&lt;/p&gt;

&lt;p&gt;Output compatibility (sometimes called &lt;em&gt;binary compatibility&lt;/em&gt;, especially in Scala 2 contexts) is much more tricky and essential for our long-term plans for Scala. It can be understood as an ability of one version of the compiler to use the output (binaries and TASTy files) generated by the other version of the compiler and understand it correctly. To be more precise, we will further subdivide output compatibility to forward and backward. We say that the two versions are forward compatible when the older compiler can depend on the output of the newer one. Conversely, backward compatibility means that the newer compiler can use the output of the older version. In the rest of this post, the term &lt;em&gt;compatibility&lt;/em&gt; will always refer to output compatibility.&lt;/p&gt;

&lt;p&gt;Scala 3 guarantees backward compatibility between all releases and forward compatibility between patch releases in the same minor line. That means that Scala &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.b.y&lt;/code&gt; can consume the output of Scala &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.a.x&lt;/code&gt; only if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; is greater or equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;. For example, the output of the Scala 3.0.2 compiler can be used by Scala 3.0.1 or 3.1.0. On the other hand, code compiled with Scala 3.1.0 cannot be a dependency of any project compiled with 3.0.2.&lt;/p&gt;

&lt;h2 id=&quot;what-version-of-scala-should-i-use&quot;&gt;What version of Scala should I use?&lt;/h2&gt;

&lt;p&gt;So, we know what output compatibility is and what Scala 3 guarantees. What does it mean in practice? What version of the compiler should I choose for my project? The compiler team believes that the good answer for this question is always &lt;em&gt;the newest one&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We believe that you should treat the compiler as one of your dependencies. If you are fine with updating the versions of your library dependencies, there should be no reason not to update the compiler version. In most cases, you wouldn’t even notice that the Scala version has changed. Meanwhile, you can get better compilation performance, improved error messages, and most importantly, you may be able to use newly stabilized features of the language and of the standard library.&lt;/p&gt;

&lt;p&gt;If you are a library author following the semantic versioning, we advise you to introduce new minor versions of the compiler only in minor releases of your library. New patch versions of the compiler can be introduced anytime, as they are forward and backward compatible.&lt;/p&gt;

&lt;p&gt;That may be surprising if you have experience developing libraries for Scala 2. For example, migrating any codebase from 2.11 to 2.12 was a huge undertaking. Since they were not output-compatible, most libraries needed to resort to cross-compilation to support both versions. Thanks to the guarantees of Scala 3, there is no longer a need for cross-compilation. For example, the migration from Scala 3.1 to Scala 3.2 for the large majority of the projects would only require changing the version in the build definition. We have tested 900 Scala libraries that were passing compilation using 3.1.3. Out of them, only 13 failed to compile with 3.2.0-RC3. That means that for 98.6% of the libraries bumping the compiler version to 3.2.0 will not require a single change in the source code.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;While this sounds good, there is one problem with intertwined ecosystems. Even though we do what we can to make the transition between minor versions of the compiler as smooth as possible, there will always be projects stuck on older versions for various reasons. That means they may be unable to update some of their dependencies if said libraries updated themselves to the newer compiler. That, in order, encourages libraries to stay on the oldest possible version of the compiler, which bars them from potentially beneficial improvements in the newer compilers.&lt;/p&gt;

&lt;p&gt;For example, let us consider a project that is stuck on Scala 3.1, for some reason. We depend on version 1.3.5 of a library compiled with Scala 3.1. The library publishes version 1.4.0 with the compiler updated to 3.2. We cannot update our dependency because of output incompatibility. That also means that all patches for security issues won’t be available unless the library author decides to backport them and release them as version 1.3.6. With that knowledge, the library author would be very reluctant to migrate from Scala 3.1 to 3.2.&lt;/p&gt;

&lt;h2 id=&quot;searching-for-a-solution&quot;&gt;Searching for a solution&lt;/h2&gt;

&lt;p&gt;We have been discussing and testing various potential solutions in the past few months. Today we want to tell you more about the attempts that failed and present the solution that we believe is the best for the future of Scala.
The three main criteria we were using to examine potential solutions were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The burden on library authors - we don’t want library maintainers and authors to feel overwhelmed by making frequent changes to the compiler that require actions on their side&lt;/li&gt;
  &lt;li&gt;The burden on the compiler maintainers - the compiler team has limited resources, so if maintaining compatibility required a considerable amount of work, we would have much less time to spend on improvements and bug fixes in the compiler&lt;/li&gt;
  &lt;li&gt;Innovativeness - some features require updating the minor version of the compiler (native image-friendly lazy vals being the latest example), and we want them delivered to the users as soon as possible. Also, we want important bug fixes to be delivered to users regardless of their update policy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-we-have-tried-so-far&quot;&gt;What we have tried so far&lt;/h2&gt;

&lt;h3 id=&quot;full-compatibility&quot;&gt;Full compatibility&lt;/h3&gt;

&lt;p&gt;For a short time, we have considered releasing a patch version for each supported past minor line every time a new minor release of the compiler appears. That would allow every minor version of the Scala 3 compiler to accept the output of any other minor version (assuming the latest patch is used). This is something similar to what is happening in Scala 2 in terms of Scala 3 compatibility. However, applying this to all minor lines of Scala 3 would be an enormous amount of work, way beyond our capabilities.&lt;/p&gt;

&lt;h3 id=&quot;maintaining-every-minor-release&quot;&gt;Maintaining every minor release&lt;/h3&gt;

&lt;p&gt;The lighter version of the approach mentioned above was to keep our current compatibility guarantees while providing backports of important bug fixes to the previous minor versions. That would still be a massive workload for us, and it would have the additional drawback of discouraging people from updating to the new minor releases.&lt;/p&gt;

&lt;h3 id=&quot;configurable-output-version&quot;&gt;Configurable output version&lt;/h3&gt;

&lt;p&gt;This was the solution that we invested the most into. It was discussed in detail in &lt;a href=&quot;/blog/2022/04/12/scala-3.1.2-released.html#configurable-scala-output-version&quot;&gt;the previous blog post&lt;/a&gt;. To summarize: in 3.1.2, we have shipped a new experimental compiler flag that allowed developers to make the compiler generate output that is usable by older versions of the compiler. While this would allow all projects to receive important fixes, it would probably result in a strange state where all the libraries are released with output version 3.1, similar to how nearly all java libraries are still released with output version 8, even though Java 8 is eight years old.&lt;/p&gt;

&lt;p&gt;More importantly, during work on 3.2, we realized that maintaining this flag may be more challenging than anticipated. With time, it will be increasingly harder to be sure that our handling of it is correct. &lt;strong&gt;Thus, we have decided to remove the possibility of configuring the output version altogether in Scala 3.2.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;our-solution-scala-lts--scala-next&quot;&gt;Our solution: Scala LTS &amp;amp; Scala Next&lt;/h2&gt;

&lt;p&gt;Finally, we have agreed that the best course of action would be to split Scala development into two lines, called &lt;em&gt;Scala LTS&lt;/em&gt; and &lt;em&gt;Scala Next&lt;/em&gt;. Both would live as separate branches in the compiler repository. Both will have separate but possibly synchronized releases. Porting changes from one to the other should be easy and common.&lt;/p&gt;

&lt;p&gt;Scala Next will be the line on which the language development is taking place. It will receive frequent minor updates, and all experimental language features will live there.&lt;/p&gt;

&lt;p&gt;Scala LTS, on the other hand, will be the stable long-term support line. An LTS version will only receive patch updates, which means that all releases of the same LTS line will be forward and backward compatible in terms of output. The only changes between releases will be bug fixes, non-language changes (doctool, semanticDB, reporting), and minor quality-of-life enhancements (only if we are sure we are not breaking any compatibility guarantees). After more than two years, we may decide to nominate one of the releases from the Next line as the new LTS. After that, we guarantee that the compiler team will support the previous LTS for at least one additional year. That means the support time for each LTS release is at least three years.&lt;/p&gt;

&lt;p&gt;We think this will allow projects to retain a more conservative approach to updating the compiler versions and still receive the bug fixes and some improvements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/scala3-lts-roadmap.svg&quot; alt=&quot;Scala LTS Roadmap&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-compatibility-guarantees-in-the-new-model&quot;&gt;The compatibility guarantees in the new model&lt;/h3&gt;

&lt;p&gt;The new model doesn’t change our compatibility guarantees. We keep forward and backward compatibility within a single minor version and backward compatibility across different minor versions. That means that the code compiled with Scala LTS can be used as a dependency by all Scala Next versions newer than said LTS, but not the other way around.&lt;/p&gt;

&lt;h2 id=&quot;the-future-best-practices&quot;&gt;The (future) best practices&lt;/h2&gt;

&lt;p&gt;Once the LTS &amp;amp; Next model is in place, we suggest the following practices for different groups of users:&lt;/p&gt;

&lt;h3 id=&quot;owners-of-commercial-projects&quot;&gt;Owners of commercial projects&lt;/h3&gt;

&lt;p&gt;We suggest you stick to the LTS version. It will give you the best tooling support and a stable compiler. If you are migrating a bigger project from Scala 2, you should migrate it straight to the newest LTS.&lt;/p&gt;

&lt;p&gt;You may also choose to be up to date with the latest minor version. That will allow you to use new features as soon as they are added to the language. However, you will need to be ready for frequent compiler updates. Otherwise, your project may end up with an unsupported language version.&lt;/p&gt;

&lt;h3 id=&quot;library-maintainers&quot;&gt;Library maintainers&lt;/h3&gt;

&lt;p&gt;Unless your library is built around some new language feature available only on Next, you should stick to the latest LTS version to have the broadest possible user base. If your library contains multiple modules, some of them may require Scala Next. It is perfectly fine as long as you keep in mind that modules compiled with Scala LTS cannot depend on them (the other way around is fine). Also, users using your library from Scala LTS won’t be able to access modules built with Next.&lt;/p&gt;

&lt;p&gt;Remember that when you bump the minor version of the compiler (e.g., moving from the previous Scala LTS line to the next), you also need to bump the minor version of your library.&lt;/p&gt;

&lt;h3 id=&quot;authors-of-hobby-or-standalone-research-projects&quot;&gt;Authors of hobby or standalone research projects&lt;/h3&gt;

&lt;p&gt;Feel free to use Scala Next. Then you will be able to use all libraries, both those for Scala LTS and Scala Next. You also will be able to test the newest and experimental features of the language.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Teach Programming with Scala</title>
    <link href="https://www.scala-lang.org/blog/2022/07/26/teach-programming-with-scala.html"/>
    <updated>2022-07-26T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2022/07/26/teach-programming-with-scala</id>
    <content type="html">&lt;p&gt;Scala is more than a great programming language for building software.
It is also a great tool for teaching programming!&lt;/p&gt;

&lt;p&gt;We are happy to announce that we have published a &lt;a href=&quot;/teach.html&quot;&gt;new page&lt;/a&gt; on the
website to explain the benefits of using Scala to teach programming, and to
show a map of the universities who use Scala around the world (also shown below).&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.8.0/dist/leaflet.css&quot; integrity=&quot;sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ==&quot; crossorigin=&quot;&quot; /&gt;

&lt;script src=&quot;https://unpkg.com/leaflet@1.8.0/dist/leaflet.js&quot; integrity=&quot;sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ==&quot; crossorigin=&quot;&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;teachers-map&quot; style=&quot;height: 400px&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  const map = L.map(&apos;teachers-map&apos;).setView([0, 0], 1);
  L.tileLayer(&apos;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&apos;, {
    maxZoom: 19,
    attribution: &apos;© OpenStreetMap&apos;
  }).addTo(map);
  L.geoJSON([
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [24.8254933, 60.1866719]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Otto Seppälä and Juha Sorva at Aalto University, Finland.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [19.9149496, 50.0689793]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Roman Debski and Bartosz Balis at AGH University of Science and Technology, Poland.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [-86.8635, 39.6394]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Brian Howard at DePauw University, United States.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [6.5600475, 46.5185825]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Martin Odersky and Michel Schinz at École Polytechnique Fédérale de Lausanne, Switzerland.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [2.3551565, 48.7979973]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Jim Newton at EPITA, France.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [6.6571205, 46.7792436]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Nastaran Fatemi at Haute École d’Ingénierie et de Gestion du canton de Vaud, Switzerland.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [114.2632715, 22.3363998]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Lionel Parreaux at Hong Kong University of Science and Technology, Hong Kong.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [36.2264517, 50.0150941]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Vyacheslav Grebenyuk at Kharkiv National University of Radio Electronics, Ukraine.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [-0.1181857, 51.5114897]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Christian Urban at King’s College London, United Kingdom.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [77.9469233, 30.3254097]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Lalit Pant at Kogics, India.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [127.358196, 36.3721427]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Sukyoung Ryu at Korea Advanced Institute of Science and Technology, South Korea.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [18.0680626, 59.3498706]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Philipp Haller at KTH Royal Institute of Technology, Sweden.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [13.203493, 55.7119483]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Björn Regnell at Lund University, Sweden.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [-98.4855322, 29.4618769]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Mark Lewis at Trinity University, United States.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [9.04158, 48.5294782]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Jonathan Brächthaeuser at Tübingen University, Germany.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [-73.9571, 41.3889]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Chris Okasaki, Ryan Dougherty, Tom Cook, and Maria Ebling at United States Military Academy at West Point, United States.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [6.1429217, 46.199444]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Laurent Moccozet at Université de Genève, Switzerland.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [151.643, -30.487]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;William Billingsley at University of New England, Australia.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [17.0322743, 51.1140086]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Michał Kowalczykiewicz at University of Wrocław, Poland.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [-3.877161467041959, 40.33560214407111]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Juan M. Serrano at University Rey Juan Carlos, Spain.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [7.35559, 46.22739]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Pierre-André Mudry at Haute Ecole d&apos;Ingénierie, Filière ISC, Switzerland.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [2.5876883468165737, 48.84274497346383]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;François Sarradin at Université Gustave Eiffel, France.&quot;
        }
      },
    
      {
        &quot;type&quot;: &quot;Feature&quot;,
        &quot;geometry&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;coordinates&quot;: [2.34003, 48.95888]
        },
        &quot;properties&quot;: {
          &quot;popupContent&quot;: &quot;Pierre Boudes at Université Sorbonne Paris Nord, France.&quot;
        }
      },
    
  ], {
    onEachFeature: function (feature, layer) {
      if (feature.properties &amp;&amp; feature.properties.popupContent) {
        layer.bindPopup(feature.properties.popupContent);
      }
    }
  }).addTo(map);
&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Teachers who use Scala in their course.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Since Scala embraces several programming paradigms, it can be used to introduce
many important concepts involved in computational thinking, from the most basic
ones to the most advanced ones. It is suitable to teach programming to
beginners, as well as to teach advanced software engineering courses.&lt;/p&gt;

&lt;p&gt;However, until now it was not easy to know which institutions use Scala. This
information can be useful for students, PhD candidates, teachers looking for
possible teaching connections, and companies interested in hiring new Scala
developers.&lt;/p&gt;

&lt;h2 id=&quot;teach-with-scala&quot;&gt;Teach with Scala&lt;/h2&gt;

&lt;p&gt;In the new &lt;a href=&quot;/teach.html&quot;&gt;“Teach”&lt;/a&gt; page, we explain why we think Scala is a great tool
for teaching programming, with evidence from several teachers around the world:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scala supports multiple programming paradigms, which helps compare and contrast
different solutions to programming problems,&lt;/li&gt;
  &lt;li&gt;Scala is expressive: students can focus on the intent of their program without
being distracted by low-level concerns or syntactic noise,&lt;/li&gt;
  &lt;li&gt;Thanks to its type system, the Scala compiler helps the students to find bugs
before run-time,&lt;/li&gt;
  &lt;li&gt;Scala’s constructs are regular and principled,&lt;/li&gt;
  &lt;li&gt;Best practices are the norm (e.g., limited usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;Scala runs on the JVM and on JS runtimes,&lt;/li&gt;
  &lt;li&gt;Scala’s ecosystem is large, and it can leverage the JVM and JS ecosystems,&lt;/li&gt;
  &lt;li&gt;Scala is versatile, it can be used to build many kinds of programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The page also shows a map of teachers who use Scala in their courses.&lt;/p&gt;

&lt;p&gt;Finally, it provides several pointers to educational material.&lt;/p&gt;

&lt;h2 id=&quot;join-the-movement&quot;&gt;Join the Movement&lt;/h2&gt;

&lt;p&gt;We welcome all the teachers who use Scala to &lt;a href=&quot;mailto:scala.center@epfl.ch?subject=Teaching&quot;&gt;contribute&lt;/a&gt; to this page by:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;adding themselves to the map of teachers,&lt;/li&gt;
  &lt;li&gt;refining the content,&lt;/li&gt;
  &lt;li&gt;providing testimonials, such as a single short sentence that summarizes
why you like using Scala to teach, or a sentence about a specific aspect
of the language that works well for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least, we have set up a &lt;a href=&quot;https://teachers.scala-lang.org&quot;&gt;community of teachers&lt;/a&gt; where you can
exchange best practices and work together on tools to improve your experience
as teachers.&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Secure the Dependencies of your Scala Project on GitHub</title>
    <link href="https://www.scala-lang.org/blog/2022/07/18/secure-your-dependencies-on-github.html"/>
    <updated>2022-07-18T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2022/07/18/secure-your-dependencies-on-github</id>
    <content type="html">&lt;p&gt;We released &lt;a href=&quot;https://github.com/marketplace/actions/sbt-dependency-submission&quot;&gt;sbt-dependency-submission&lt;/a&gt;, a GitHub action that submits the dependencies of sbt builds to the &lt;a href=&quot;https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api&quot;&gt;GitHub Dependency submission API&lt;/a&gt; (currently in beta).
This action, once installed in a GitHub workflow, allows you to view the &lt;a href=&quot;https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph&quot;&gt;Dependency graph&lt;/a&gt; in GitHub and to receive regular security reports from &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-alerts/about-dependabot-alerts&quot;&gt;Dependabot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A similar action for the Mill build tool, the &lt;a href=&quot;https://github.com/marketplace/actions/mill-dependency-submission&quot;&gt;mill-dependency-submission&lt;/a&gt; action, developed by Chris Kipp, is also available.
Other solutions are available for Maven and Gradle as well.&lt;/p&gt;

&lt;p&gt;The next sections explain the motivation behind this project, show how to get started, compare Dependabot and Scala Steward, and list similar solutions for other build tools.&lt;/p&gt;

&lt;h2 id=&quot;github-dependabot-and-the-scala-ecosystem&quot;&gt;GitHub Dependabot and the Scala ecosystem&lt;/h2&gt;

&lt;p&gt;Last year, the &lt;a href=&quot;https://scala-lang.org/blog-detail/2021/12/16/state-of-log4j-in-scala-ecosystem.html&quot;&gt;Log4j CVE&lt;/a&gt; reminded us of the importance of staying alert to security vulnerabilities.
Fixing all known vulnerabilities once does not make your project secure, since critical vulnerabilities can always be found and exploited in open source libraries, even the most widely used ones.
Being able to identify new vulnerabilities and to respond to them quickly reduces the risk of exposure to its minimum.
But the task can be time consuming, unless we automate it.&lt;/p&gt;

&lt;p&gt;GitHub Dependabot is an automation tool that helps us secure our projects.
Its initial approach is to scan static configuration files such as POM files or package-lock.json files to extract the dependencies of a repository and cross reference them with a database of vulnerabilities.
But some build definitions, such as build.sbt files, are programs that cannot be statically analyzed.
A few weeks ago, GitHub released the beta version of the Dependency submission API, a REST API that we can use in CI workflows to submit complete snapshots of dependencies when they are resolved at build-time.&lt;/p&gt;

&lt;p&gt;As a large part of the Scala community uses GitHub to host their projects, we developed sbt-dependency-submission, a GitHub action that can extract the graphs of dependencies of sbt projects, for Dependabot to analyze them and report any vulnerability.
With this tool, we hope to contribute to building a more secure Scala open source ecosystem.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-workflow&quot;&gt;Setting up the workflow&lt;/h2&gt;

&lt;p&gt;Before installing the dependency submission action, you need to ensure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dependency graph&lt;/code&gt; view is enabled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings &amp;gt; Code security and analysis&lt;/code&gt; tab of your GitHub repository.
You should also consider enabling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dependabot alerts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/blog/github/dependency-graph.jpg&quot; alt=&quot;Dependency graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To install the action, add a new workflow in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; folder, with the following definition:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# .github/workflows/dependency-graph.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update Dependency Graph&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# default branch of the project&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;update-graph&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update Dependency Graph&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scalacenter/sbt-dependency-submission@v2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;## Optional: Define the working directory of your build.&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;## It should contain the build.sbt file.&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;working-directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This default definition should work in many sbt builds out-of-the-box.
Given a valid sbt build, the action installs an sbt plugin that will extract all transitive library dependencies from all subprojects on all Scala versions.&lt;/p&gt;

&lt;p&gt;For troubleshooting, please refer to the &lt;a href=&quot;https://github.com/marketplace/actions/sbt-dependency-submission&quot;&gt;documentation&lt;/a&gt; of the action.&lt;/p&gt;

&lt;h2 id=&quot;scala-steward-and-github-dependabot&quot;&gt;Scala Steward and GitHub Dependabot&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scala-steward-org/scala-steward&quot;&gt;Scala Steward&lt;/a&gt; is a tool that helps you keep the dependencies of your project up-to-date by opening pull requests on GitHub (and other hosting services).
It is used in more than a thousand open-source repositories and many proprietary ones and contributes to a large extent to the security of the Scala ecosystem.&lt;/p&gt;

&lt;p&gt;Dependabot and Scala Steward can be used as complementary tools.
Scala Steward, as a preventive tool, can help you keep your dependencies up-to-date, which reduces the risk of security vulnerabilities.
Dependabot, as a monitoring tool, can notify you when a vulnerability is found, so that you can act quickly.&lt;/p&gt;

&lt;p&gt;Dependabot can also send PRs to update dependencies, but in static configuration files only.
It can update the actions in your GitHub workflows, or the Maven dependencies in your POM files, but not the dependencies in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.sc&lt;/code&gt; files.&lt;/p&gt;

&lt;h2 id=&quot;other-supported-build-tools&quot;&gt;Other supported build tools&lt;/h2&gt;

&lt;p&gt;You can use Dependabot with other Scala-compatible build tools.&lt;/p&gt;

&lt;h3 id=&quot;maven&quot;&gt;Maven&lt;/h3&gt;

&lt;p&gt;Dependabot supports Maven through static analysis of POM files.
You can enable the Dependency graph view and Dependabot in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings &amp;gt; Code security and analysis&lt;/code&gt; page.&lt;/p&gt;

&lt;h3 id=&quot;mill&quot;&gt;Mill&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/marketplace/actions/mill-dependency-submission&quot;&gt;mill-dependency-submission&lt;/a&gt; action, developed by Chris Kipp, can extract the dependencies of a Mill build.&lt;/p&gt;

&lt;p&gt;To install it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dependency graph&lt;/code&gt; view, and optionally the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dependabot alerts&lt;/code&gt;, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings &amp;gt; Code security and analysis&lt;/code&gt; page of your repository.&lt;/li&gt;
  &lt;li&gt;Add this workflow in you repository:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# .github/workflows/dependency-graph.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update Dependency Graph&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# default branch of the project&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;update-graph&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update Dependency Graph&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;coursier/cache-action@v6&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-java@v3&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;distribution&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temurin&apos;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;java-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;17&apos;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ckipp01/mill-dependency-submission@v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;gradle&quot;&gt;Gradle&lt;/h3&gt;

&lt;p&gt;Gradle users can use the &lt;a href=&quot;https://github.com/marketplace/actions/gradle-dependency-submission&quot;&gt;gradle-dependency-submission&lt;/a&gt; action.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In GitHub, it is now possible to use pre-made actions, like &lt;a href=&quot;https://github.com/marketplace/actions/sbt-dependency-submission&quot;&gt;sbt-dependency-submission&lt;/a&gt; or &lt;a href=&quot;https://github.com/marketplace/actions/mill-dependency-submission&quot;&gt;mill-dependency-submission&lt;/a&gt;, to extract full graphs of dependencies at build time.
This allows Dependabot to analyze the dependencies and publish regular reports of vulnerabilities.
Only project administrators, organization owners and users with explicit access can see the Dependabot reports.&lt;/p&gt;

&lt;p&gt;The sbt-dependency-submission action is a fresh tool that relies on the beta Dependency submission API, but the cost of trying it is low and it will help you secure your sbt builds.
Give it a try and report any bug at &lt;a href=&quot;https://github.com/scalacenter/sbt-dependency-submission&quot;&gt;scalacenter/sbt-dependency-submission&lt;/a&gt;.&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Scala Improvement Process - Evolving Scala openly and collaboratively</title>
    <link href="https://www.scala-lang.org/blog/2022/07/13/scala-improvement-process-reloaded.html"/>
    <updated>2022-07-13T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2022/07/13/scala-improvement-process-reloaded</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://docs.scala-lang.org/sips&quot;&gt;Scala Improvement Process&lt;/a&gt; is a process for submitting changes to the Scala language, hosted by the Scala Center. It aims to evolve Scala openly and collaboratively. The process was paused between March 2020 and July 2022, while we prioritized the release and stabilization of Scala 3. We took this time to examine and improve the process itself and invite a new set of Committee members to lead the process forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today, we are excited to announce that the Scala Improvement Process is officially restarting and we welcome your proposals.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In short, the Scala Improvement Process defines a Committee that approves or rejects language feature proposals, and decides which experimental features should become stable. Proposals are submitted in the form of pull requests in a &lt;a href=&quot;https://github.com/scala/improvement-proposals&quot;&gt;GitHub repository&lt;/a&gt;, after an initial discussion in the &lt;a href=&quot;https://contributors.scala-lang.org/&quot;&gt;contributors.scala-lang.org&lt;/a&gt; forum.&lt;/p&gt;

&lt;p&gt;In the following sections we invite you to discover the new SIP Committee and its responsibilities, and we explain the differences between the two process editions.&lt;/p&gt;

&lt;h2 id=&quot;meet-the-new-sip-committee-members&quot;&gt;Meet the New SIP Committee Members&lt;/h2&gt;

&lt;p&gt;One of the main goals of the new SIP is to ensure that the best decisions are being made based on the interest of all the stakeholders. We achieve this by having a committee made of various kinds of stakeholders: language designers, compiler engineers, university teachers, tooling engineers, community enthusiasts and companies using Scala.&lt;/p&gt;

&lt;p&gt;It is our pleasure to present the new SIP Committee members:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Björn Regnell, Lund University&lt;/li&gt;
  &lt;li&gt;Chris Andrews, Morgan Stanley&lt;/li&gt;
  &lt;li&gt;Gabriele Petronella, buildo&lt;/li&gt;
  &lt;li&gt;Guillaume Martres, EPFL&lt;/li&gt;
  &lt;li&gt;Iulian Dragos, Databricks&lt;/li&gt;
  &lt;li&gt;Lukas Rytz, Lightbend&lt;/li&gt;
  &lt;li&gt;Martin Odersky, EPFL&lt;/li&gt;
  &lt;li&gt;Oron Port, DFiant Inc&lt;/li&gt;
  &lt;li&gt;Paweł Marks, VirtusLab&lt;/li&gt;
  &lt;li&gt;Raúl Raja, 47 Degrees&lt;/li&gt;
  &lt;li&gt;Sébastien Doeraene, Scala Center&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The committee chair is Julien Richard-Foy, Scala Center.&lt;/p&gt;

&lt;p&gt;The members are invited to serve 1- or 2-year terms. Thereafter, they may be re-invited, but not for more than 2 full terms. Afterwards, they would need to have a break before they can be re-invited again. We hope to have many great Scala contributors being a part of the SIP committee in the upcoming years, to share their experience and enrich the Scala language in the process.&lt;/p&gt;

&lt;h3 id=&quot;setting-expectations&quot;&gt;Setting expectations&lt;/h3&gt;

&lt;p&gt;The SIP Committee will meet once a month, for 10 months out of a year, to make decisions on the proposals. Between the meetings, there will be public discussions on the repository and a team of 3 committee members will be assigned to fully examine and present each proposal to the Committee. All the decisions will be communicated on the &lt;a href=&quot;https://github.com/scala/improvement-proposals/pulls&quot;&gt;pull requests&lt;/a&gt; corresponding to the proposals, and a list of all the proposals and their status is shown &lt;a href=&quot;https://docs.scala-lang.org/sips/all.html&quot;&gt;on the Scala website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We expect that we would be able to cover about three proposals every month, but we will only know more as time goes by.&lt;/p&gt;

&lt;h2 id=&quot;difference-with-the-previous-sip&quot;&gt;Difference with the previous SIP&lt;/h2&gt;

&lt;p&gt;In this section we would like to share a bit about what we learned from the SIP that was running since 2016 and how we integrated those learnings in the new process.&lt;/p&gt;

&lt;p&gt;For more details, please find the &lt;a href=&quot;https://docs.scala-lang.org/sips/process-specification.html&quot;&gt;specification&lt;/a&gt; of the new process and a &lt;a href=&quot;https://docs.scala-lang.org/sips/sip-tutorial.html&quot;&gt;submission tutorial&lt;/a&gt; on the Scala website.&lt;/p&gt;

&lt;p&gt;We used to discuss the proposals during live meetings, every month. We identified the following drawbacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most of the discussions happened during the meetings, and not much progress was made in-between the meetings. It could take a very long time before we reached a conclusion for a proposal.&lt;/li&gt;
  &lt;li&gt;Writing and publishing the meeting minutes was very time-consuming, which slowed down the whole process.&lt;/li&gt;
  &lt;li&gt;The fact that every proposal was always discussed by the whole committee was a bottleneck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the new process, the proposals are reviewed publicly, on GitHub. There is no need to wait for the next SIP meeting to make progress on the proposals. The regular SIP meetings will still happen every month, but they won’t be live, nor public. After the meeting, the outcome of the votes will be communicated on the corresponding proposals, directly on GitHub. Last, the review process now happens in two steps: a group of three reviewers performs a first deep review of the proposal, and only when it is well specified they present it to the whole committee for approval.&lt;/p&gt;

&lt;p&gt;As with any decision, we had to look at the tradeoffs, and these changes were made in favor of ensuring that the proposals get processed, and decisions made regularly and frequently.&lt;/p&gt;

&lt;p&gt;Other pain points of the previous edition of the process were:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The voting process was based on complicated rules. Now, a proposal is accepted if more than 50% of the committee members present in the meeting vote to accept it.&lt;/li&gt;
  &lt;li&gt;Proposal authors had few guidelines on how to turn their ideas into good language specifications. We have extended the &lt;a href=&quot;https://github.com/scala/improvement-proposals/blob/main/sip-template.md&quot;&gt;SIP template&lt;/a&gt; to provide more hints.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things that did not change are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A “pre-SIP discussion” is still the recommended way to start proposing a change. The goal of this step is to gather feedback and support from the community.&lt;/li&gt;
  &lt;li&gt;Once a year, the committee will meet in person during a “retreat”.&lt;/li&gt;
  &lt;li&gt;Discussions on the proposals are welcome. The only difference is that they now happen on GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, we overhauled the process to make it more sustainable. This work was not done solely by the Scala Center. We would like to thank Adam Goodman, Director of the Center for Leadership, Northwestern University, who, for 6 months, guided us to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Learn from our experience of the Scala 2 Improvement Process,&lt;/li&gt;
  &lt;li&gt;Engage with main stakeholders and integrate their needs,&lt;/li&gt;
  &lt;li&gt;Restructure the process around the learnings,&lt;/li&gt;
  &lt;li&gt;Create a stronger process for the future we want to build.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We aim to create the best possible structure to support both authors and committee members, in order for the process to run smoothly and committee members to regularly make decisions. We will continue to adjust the process itself, as we continue to learn along the way. Please let us know if you have any suggestions by writing to &lt;a href=&quot;mailto:scala.improvement@epfl.ch&quot;&gt;scala.improvement@epfl.ch&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scala 3.1.3 released!</title>
    <link href="https://www.scala-lang.org/blog/2022/06/21/scala-3.1.3-released.html"/>
    <updated>2022-06-21T00:00:00+02:00</updated>
    <id>https://www.scala-lang.org/blog/2022/06/21/scala-3.1.3-released</id>
    <content type="html">&lt;p&gt;We are happy to announce the release of Scala 3.1.3! You can read more about all the improvements and fixes in &lt;a href=&quot;https://github.com/lampepfl/dotty/releases/tag/3.1.3&quot;&gt;the full changelog&lt;/a&gt;. We have also prepared a short list of highlights of the most exciting additions in the new version.&lt;/p&gt;

&lt;h2 id=&quot;highlights-of-the-release&quot;&gt;Highlights of the release&lt;/h2&gt;

&lt;h3 id=&quot;improved-f-interpolator&quot;&gt;Improved f-interpolator&lt;/h3&gt;

&lt;p&gt;f-interpolator in Scala 3 has received multiple fixes and improvements recently. Now it has reached feature parity with its Scala 2 counterpart.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cases that were incorrectly failing are now working as intended:&lt;/p&gt;

    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${3.14}%.2f rounds to ${3}%d&quot;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// &quot;3.14 rounds to 3&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${java.lang.Boolean.valueOf(false)}%b&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;false&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${BigInt(120)}%d&quot;&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;// &quot;120&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${3L}%e&quot;&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;// &quot;3.000000e+00&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Backslash escapes are now handled properly and consistently:&lt;/p&gt;

    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes\\\no&quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &quot;yes\&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;//  o&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many cases that were throwing runtime exceptions are now causing compilation errors instead:&lt;/p&gt;

    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{1} % y&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Error: illegal conversion character &apos;y&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;better-error-reporting-in-inlined-code&quot;&gt;Better error reporting in inlined code&lt;/h3&gt;

&lt;p&gt;When the compiler reports an error that occurred in inlined code, it now displays the source from where the inlined function was invoked. That gives more context to the users on what happened and where the error came from.&lt;/p&gt;

&lt;p&gt;For example, the snippet:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;compiletime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;summonInline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will now report a compilation error looking like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/inline-error-after.png&quot; alt=&quot;the new error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;instead of previously&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/img/inline-error-before.png&quot; alt=&quot;the old error&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;possibility-to-generate-arbitrary-class-implementations-in-macros&quot;&gt;Possibility to generate arbitrary class implementations in macros&lt;/h3&gt;

&lt;p&gt;For a long time, generating arbitrary classes was not possible using the quotes api. With 3.1.3, the situation has changed. We added two missing blocks: experimental methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassDef.apply&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Symbol.newClass&lt;/code&gt;. Now using them, you can write a snippet similar to the following:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.quoted.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;transparent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classNamed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classNamedExpr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&apos;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classNamedExpr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nameExpr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Quotes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;quotes.reflect.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nameExpr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;valueOrAbort&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parents&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TypeTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;empty&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// put something interesting here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;empty&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// ...and here&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;newClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;spliceOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;tpe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selfType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;classDef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassDef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ctor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TypeIdent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;primaryConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Typed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TypeTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classDef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;asExprOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you can invoke the macro with&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classNamed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;creating the new instance of your custom subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base&lt;/code&gt;. That can be useful for the compile-time generation of proxies for remote procedure call systems and many other advanced use-cases.&lt;/p&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Thank you to all the contributors who made this release possible.&lt;/p&gt;

&lt;p&gt;According to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git shortlog -sn --no-merges 3.1.2..3.1.3&lt;/code&gt; these are:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    66  odersky
    48  Nicolas Stucki
    38  Filip Zybała
    36  Martin Odersky
    29  noti0na1
    27  Som Snytt
    24  Dale Wijnand
    19  Anatolii Kmetiuk
    19  Chris Kipp
    18  Paweł Marks
    17  Rikito Taniguchi
    13  Xavientois
    13  Tom Grigg
    12  Jan Chyb
    11  Guillaume Martres
     8  Jamie Thompson
     8  Matt Bovel
     6  Tomasz Godzik
     5  Michael Pilquist
     5  rochala
     4  adampauls
     4  Kacper Korban
     3  Sébastien Doeraene
     3  Andrzej Ressel
     3  Olivier Blanvillain
     3  Phil
     3  Seth Tisue
     2  Stéphane Micheloud
     2  Yichen Xu
     2  Arman Bilge
     2  Julien Richard-Foy
     2  Adrien Piquerez
     1  ireina7
     1  Alexander Ioffe
     1  Jentsch
     1  Jędrzej Rochala
     1  Michał Pałka
     1  Ondrej Lhotak
     1  Pascal Weisenburger
     1  Quentin Bernet
     1  Ruslan Shevchenko
     1  SrTobi
     1  Stephane MICHELOUD
     1  Vadim Chelyshov
     1  Vasil Vasilev
     1  bjornregnell
     1  ghostbuster91
     1  som-snytt
     1  Łukasz Wroński
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
  </entry>
  
</feed>
